
My_Task_Schedular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014a0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080016a0  080016a0  000026a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001748  08001748  0000306c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001748  08001748  00002748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001750  08001750  0000306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001750  08001750  00002750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001754  08001754  00002754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08001758  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000006c  080017c4  0000306c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  080017c4  000031ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b13  00000000  00000000  0000309a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000040d  00000000  00000000  00003bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  00003fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000119  00000000  00000000  00004150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d97  00000000  00000000  00004269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001649  00000000  00000000  00007000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009c0f  00000000  00000000  00008649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00012258  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cf0  00000000  00000000  0001229c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00012f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000006c 	.word	0x2000006c
 800021c:	00000000 	.word	0x00000000
 8000220:	08001688 	.word	0x08001688

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000070 	.word	0x20000070
 800023c:	08001688 	.word	0x08001688

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <main>:
uint32_t psp_of_tasks[MAX_TASKS] = { T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START};

uint32_t task_handlers[MAX_TASKS];

int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0

	printf("Namaste Duniya\n");
 80002e4:	480f      	ldr	r0, [pc, #60]	@ (8000324 <main+0x44>)
 80002e6:	f000 fb6d 	bl	80009c4 <puts>

	// Enable Processor faults
	Enable_Processor_Faults();
 80002ea:	f000 f885 	bl	80003f8 <Enable_Processor_Faults>
	Init_Schedular_Stack(SCHED_STACK_START);                   // 1. Initialised schedular stack i.e. MSP
 80002ee:	480e      	ldr	r0, [pc, #56]	@ (8000328 <main+0x48>)
 80002f0:	f000 f87c 	bl	80003ec <Init_Schedular_Stack>

	task_handlers[0] = (uint32_t) task1_handler;
 80002f4:	4a0d      	ldr	r2, [pc, #52]	@ (800032c <main+0x4c>)
 80002f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000330 <main+0x50>)
 80002f8:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t) task2_handler;
 80002fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000334 <main+0x54>)
 80002fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000330 <main+0x50>)
 80002fe:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t) task3_handler;
 8000300:	4a0d      	ldr	r2, [pc, #52]	@ (8000338 <main+0x58>)
 8000302:	4b0b      	ldr	r3, [pc, #44]	@ (8000330 <main+0x50>)
 8000304:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t) task4_handler;
 8000306:	4a0d      	ldr	r2, [pc, #52]	@ (800033c <main+0x5c>)
 8000308:	4b09      	ldr	r3, [pc, #36]	@ (8000330 <main+0x50>)
 800030a:	60da      	str	r2, [r3, #12]

	Init_Tasks_Stack();// Dummy SF's                           //2. TAsks Stack Initit
 800030c:	f000 f894 	bl	8000438 <Init_Tasks_Stack>

	init_systick_timer(TICK_HZ);                              //SYsTick
 8000310:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000314:	f000 f834 	bl	8000380 <init_systick_timer>

	Switch_SP_PSP();
 8000318:	f000 f90e 	bl	8000538 <Switch_SP_PSP>

	task1_handler();
 800031c:	f000 f810 	bl	8000340 <task1_handler>

	for(;;);
 8000320:	bf00      	nop
 8000322:	e7fd      	b.n	8000320 <main+0x40>
 8000324:	080016a0 	.word	0x080016a0
 8000328:	2007ec00 	.word	0x2007ec00
 800032c:	08000341 	.word	0x08000341
 8000330:	2000008c 	.word	0x2000008c
 8000334:	08000351 	.word	0x08000351
 8000338:	08000361 	.word	0x08000361
 800033c:	08000371 	.word	0x08000371

08000340 <task1_handler>:
}


void task1_handler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Task-1");
 8000344:	4801      	ldr	r0, [pc, #4]	@ (800034c <task1_handler+0xc>)
 8000346:	f000 fad5 	bl	80008f4 <iprintf>
 800034a:	e7fb      	b.n	8000344 <task1_handler+0x4>
 800034c:	080016b0 	.word	0x080016b0

08000350 <task2_handler>:
	}
}

void task2_handler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Task-2");
 8000354:	4801      	ldr	r0, [pc, #4]	@ (800035c <task2_handler+0xc>)
 8000356:	f000 facd 	bl	80008f4 <iprintf>
 800035a:	e7fb      	b.n	8000354 <task2_handler+0x4>
 800035c:	080016b8 	.word	0x080016b8

08000360 <task3_handler>:
	}
}

void task3_handler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Task-3");
 8000364:	4801      	ldr	r0, [pc, #4]	@ (800036c <task3_handler+0xc>)
 8000366:	f000 fac5 	bl	80008f4 <iprintf>
 800036a:	e7fb      	b.n	8000364 <task3_handler+0x4>
 800036c:	080016c0 	.word	0x080016c0

08000370 <task4_handler>:
	}
}

void task4_handler(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Task-4");
 8000374:	4801      	ldr	r0, [pc, #4]	@ (800037c <task4_handler+0xc>)
 8000376:	f000 fabd 	bl	80008f4 <iprintf>
 800037a:	e7fb      	b.n	8000374 <task4_handler+0x4>
 800037c:	080016c8 	.word	0x080016c8

08000380 <init_systick_timer>:
	}
}


void init_systick_timer(uint32_t tick_hz)
{
 8000380:	b480      	push	{r7}
 8000382:	b087      	sub	sp, #28
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;  //systick reload value register got in M7
 8000388:	4b15      	ldr	r3, [pc, #84]	@ (80003e0 <init_systick_timer+0x60>)
 800038a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;  //systick current value register
 800038c:	4b15      	ldr	r3, [pc, #84]	@ (80003e4 <init_systick_timer+0x64>)
 800038e:	613b      	str	r3, [r7, #16]


    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8000390:	4a15      	ldr	r2, [pc, #84]	@ (80003e8 <init_systick_timer+0x68>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	fbb2 f3f3 	udiv	r3, r2, r3
 8000398:	3b01      	subs	r3, #1
 800039a:	60fb      	str	r3, [r7, #12]

    *pSRVR &= ~(0x00FFFFFFFF);
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
    *pSRVR |= count_value;
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	431a      	orrs	r2, r3
 80003aa:	697b      	ldr	r3, [r7, #20]
 80003ac:	601a      	str	r2, [r3, #0]


    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80003ae:	693b      	ldr	r3, [r7, #16]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f043 0202 	orr.w	r2, r3, #2
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f043 0204 	orr.w	r2, r3, #4
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 0); //enables the counter
 80003c6:	693b      	ldr	r3, [r7, #16]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f043 0201 	orr.w	r2, r3, #1
 80003ce:	693b      	ldr	r3, [r7, #16]
 80003d0:	601a      	str	r2, [r3, #0]


}
 80003d2:	bf00      	nop
 80003d4:	371c      	adds	r7, #28
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	e000e014 	.word	0xe000e014
 80003e4:	e000e010 	.word	0xe000e010
 80003e8:	00f42400 	.word	0x00f42400

080003ec <Init_Schedular_Stack>:


__attribute__((naked)) void Init_Schedular_Stack(uint32_t Schedule_top_of_stack)
{
 80003ec:	4603      	mov	r3, r0
	//Change MSP so use Inline func and made naked fucntion
    __asm volatile("MSR MSP,%0": :  "r" (Schedule_top_of_stack)  :   );
 80003ee:	f383 8808 	msr	MSP, r3
    __asm volatile("BX LR");
 80003f2:	4770      	bx	lr

}
 80003f4:	bf00      	nop
	...

080003f8 <Enable_Processor_Faults>:


void Enable_Processor_Faults(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 80003fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000434 <Enable_Processor_Faults+0x3c>)
 8000400:	607b      	str	r3, [r7, #4]

*pSHCSR |= ( 1 << 16); //mem manage
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	601a      	str	r2, [r3, #0]
*pSHCSR |= ( 1 << 17); //bus fault
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	601a      	str	r2, [r3, #0]
*pSHCSR |= ( 1 << 18); //usage fault
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	601a      	str	r2, [r3, #0]
}
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	e000ed24 	.word	0xe000ed24

08000438 <Init_Tasks_Stack>:


void Init_Tasks_Stack(void )
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
	uint32_t *pPSP;
	for (int i=0; i<MAX_TASKS; i++)
 800043e:	2300      	movs	r3, #0
 8000440:	60bb      	str	r3, [r7, #8]
 8000442:	e032      	b.n	80004aa <Init_Tasks_Stack+0x72>
	{
		pPSP = (uint32_t*)psp_of_tasks[i];
 8000444:	4a1e      	ldr	r2, [pc, #120]	@ (80004c0 <Init_Tasks_Stack+0x88>)
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800044c:	60fb      	str	r3, [r7, #12]

		pPSP --;
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3b04      	subs	r3, #4
 8000452:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;   //0x00100000
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800045a:	601a      	str	r2, [r3, #0]


		pPSP --;  //FOR PC
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	3b04      	subs	r3, #4
 8000460:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i]; // verify the adress should be Thumb odd adress one
 8000462:	4a18      	ldr	r2, [pc, #96]	@ (80004c4 <Init_Tasks_Stack+0x8c>)
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	601a      	str	r2, [r3, #0]

		pPSP --;  //FOR LR
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	3b04      	subs	r3, #4
 8000472:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;   //0x00100000
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f06f 0202 	mvn.w	r2, #2
 800047a:	601a      	str	r2, [r3, #0]


		for (int j=0; j<13; j++)
 800047c:	2300      	movs	r3, #0
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	e008      	b.n	8000494 <Init_Tasks_Stack+0x5c>
		{
			pPSP --;
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	3b04      	subs	r3, #4
 8000486:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
		for (int j=0; j<13; j++)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	3301      	adds	r3, #1
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2b0c      	cmp	r3, #12
 8000498:	ddf3      	ble.n	8000482 <Init_Tasks_Stack+0x4a>
		}

		psp_of_tasks[i] = (uint32_t) pPSP;
 800049a:	68fa      	ldr	r2, [r7, #12]
 800049c:	4908      	ldr	r1, [pc, #32]	@ (80004c0 <Init_Tasks_Stack+0x88>)
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<MAX_TASKS; i++)
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	3301      	adds	r3, #1
 80004a8:	60bb      	str	r3, [r7, #8]
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	ddc9      	ble.n	8000444 <Init_Tasks_Stack+0xc>

	}

}
 80004b0:	bf00      	nop
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	20000000 	.word	0x20000000
 80004c4:	2000008c 	.word	0x2000008c

080004c8 <get_psp_value>:


uint32_t get_psp_value(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 80004cc:	4b04      	ldr	r3, [pc, #16]	@ (80004e0 <get_psp_value+0x18>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a04      	ldr	r2, [pc, #16]	@ (80004e4 <get_psp_value+0x1c>)
 80004d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	20000088 	.word	0x20000088
 80004e4:	20000000 	.word	0x20000000

080004e8 <save_psp_value>:



void save_psp_value (uint32_t current_psp_val)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task] = current_psp_val;
 80004f0:	4b05      	ldr	r3, [pc, #20]	@ (8000508 <save_psp_value+0x20>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4905      	ldr	r1, [pc, #20]	@ (800050c <save_psp_value+0x24>)
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	20000088 	.word	0x20000088
 800050c:	20000000 	.word	0x20000000

08000510 <update_next_task>:


void update_next_task(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
	current_task++;
 8000514:	4b07      	ldr	r3, [pc, #28]	@ (8000534 <update_next_task+0x24>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	3301      	adds	r3, #1
 800051a:	4a06      	ldr	r2, [pc, #24]	@ (8000534 <update_next_task+0x24>)
 800051c:	6013      	str	r3, [r2, #0]
	current_task = current_task % MAX_TASKS;   // RR
 800051e:	4b05      	ldr	r3, [pc, #20]	@ (8000534 <update_next_task+0x24>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f003 0303 	and.w	r3, r3, #3
 8000526:	4a03      	ldr	r2, [pc, #12]	@ (8000534 <update_next_task+0x24>)
 8000528:	6013      	str	r3, [r2, #0]
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	20000088 	.word	0x20000088

08000538 <Switch_SP_PSP>:
{

	// 1. init PSP with Task 1 stack start address

	//get the values of PSP of current task
	__asm volatile ("PUSH {LR}");          // Preveserve LR to connect back to main
 8000538:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");  // return stores in R0
 800053a:	f7ff ffc5 	bl	80004c8 <get_psp_value>
	__asm volatile ("MSR PSP, R0");   // PSP Initialisation
 800053e:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");      // POPS back LR Value
 8000542:	f85d eb04 	ldr.w	lr, [sp], #4


	//2. Change SP to PSP using Control Reg
	__asm volatile ("MOV R0, #0x02");
 8000546:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 800054a:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");     // LR to PC connects us back to main
 800054e:	4770      	bx	lr

}
 8000550:	bf00      	nop

08000552 <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler(void)
{
    // Save context of current task
	//1.  Get current running task's psp value
	__asm volatile ("MRS R0, PSP");
 8000552:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value store SF2 (R4 to R11)  can not use PUSH instruction here
	__asm volatile("STMDB R0!,{R4-R11}");  // ! -> R0 gets updated each time
 8000556:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}


	__asm volatile ("PUSH {LR}");  // LR was crasing before so added here to verify it
 800055a:	b500      	push	{lr}
	//3. Save current value to PSP
	__asm volatile("BL save_psp_value");
 800055c:	f7ff ffc4 	bl	80004e8 <save_psp_value>



	// Retrive context of next task
	//1. Decide Next task to run
	__asm volatile("BL update_next_task");
 8000560:	f7ff ffd6 	bl	8000510 <update_next_task>
	//2. get it's past psp value
	__asm volatile ("BL get_psp_value");  // return stores in R0
 8000564:	f7ff ffb0 	bl	80004c8 <get_psp_value>
	//3. Using that PSP value retrive SF2 (R4 to R11) data movement from memory to reg (need to check)
	__asm volatile ("LDMIA R0!,{R4-R11}");
 8000568:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//4. update PSP and Exit
	__asm volatile ("MSR PSP, R0");
 800056c:	f380 8809 	msr	PSP, r0

	__asm volatile ("POP {LR}");
 8000570:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile ("BX LR");
 8000574:	4770      	bx	lr


	 __asm volatile (
 8000576:	f3ef 8009 	mrs	r0, PSP
 800057a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800057e:	f7ff ffb3 	bl	80004e8 <save_psp_value>
 8000582:	f7ff ffc5 	bl	8000510 <update_next_task>
 8000586:	f7ff ff9f 	bl	80004c8 <get_psp_value>
 800058a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800058e:	f380 8809 	msr	PSP, r0
 8000592:	4770      	bx	lr

	        // ------------------ RETURN TO THREAD ----------------
	        "BX LR                      \n" // Exception return will restore rest
	    );

}
 8000594:	bf00      	nop
	...

08000598 <HardFault_Handler>:
}*/



void HardFault_Handler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 800059c:	4802      	ldr	r0, [pc, #8]	@ (80005a8 <HardFault_Handler+0x10>)
 800059e:	f000 fa11 	bl	80009c4 <puts>
	while(1);
 80005a2:	bf00      	nop
 80005a4:	e7fd      	b.n	80005a2 <HardFault_Handler+0xa>
 80005a6:	bf00      	nop
 80005a8:	080016d0 	.word	0x080016d0

080005ac <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 80005b0:	4802      	ldr	r0, [pc, #8]	@ (80005bc <MemManage_Handler+0x10>)
 80005b2:	f000 fa07 	bl	80009c4 <puts>
	while(1);
 80005b6:	bf00      	nop
 80005b8:	e7fd      	b.n	80005b6 <MemManage_Handler+0xa>
 80005ba:	bf00      	nop
 80005bc:	080016e8 	.word	0x080016e8

080005c0 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 80005c4:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <BusFault_Handler+0x10>)
 80005c6:	f000 f9fd 	bl	80009c4 <puts>
	while(1);
 80005ca:	bf00      	nop
 80005cc:	e7fd      	b.n	80005ca <BusFault_Handler+0xa>
 80005ce:	bf00      	nop
 80005d0:	08001700 	.word	0x08001700

080005d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	e00a      	b.n	80005fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005e6:	f3af 8000 	nop.w
 80005ea:	4601      	mov	r1, r0
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	1c5a      	adds	r2, r3, #1
 80005f0:	60ba      	str	r2, [r7, #8]
 80005f2:	b2ca      	uxtb	r2, r1
 80005f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697a      	ldr	r2, [r7, #20]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	dbf0      	blt.n	80005e6 <_read+0x12>
  }

  return len;
 8000604:	687b      	ldr	r3, [r7, #4]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b086      	sub	sp, #24
 8000612:	af00      	add	r7, sp, #0
 8000614:	60f8      	str	r0, [r7, #12]
 8000616:	60b9      	str	r1, [r7, #8]
 8000618:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
 800061e:	e009      	b.n	8000634 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	60ba      	str	r2, [r7, #8]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	3301      	adds	r3, #1
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	697a      	ldr	r2, [r7, #20]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	429a      	cmp	r2, r3
 800063a:	dbf1      	blt.n	8000620 <_write+0x12>
  }
  return len;
 800063c:	687b      	ldr	r3, [r7, #4]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <_close>:

int _close(int file)
{
 8000646:	b480      	push	{r7}
 8000648:	b083      	sub	sp, #12
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800065e:	b480      	push	{r7}
 8000660:	b083      	sub	sp, #12
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
 8000666:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800066e:	605a      	str	r2, [r3, #4]
  return 0;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <_isatty>:

int _isatty(int file)
{
 800067e:	b480      	push	{r7}
 8000680:	b083      	sub	sp, #12
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000686:	2301      	movs	r3, #1
}
 8000688:	4618      	mov	r0, r3
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
	...

080006b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006b8:	4a14      	ldr	r2, [pc, #80]	@ (800070c <_sbrk+0x5c>)
 80006ba:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <_sbrk+0x60>)
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006c4:	4b13      	ldr	r3, [pc, #76]	@ (8000714 <_sbrk+0x64>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d102      	bne.n	80006d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <_sbrk+0x64>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <_sbrk+0x68>)
 80006d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006d2:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <_sbrk+0x64>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	693a      	ldr	r2, [r7, #16]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d207      	bcs.n	80006f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006e0:	f000 fa9e 	bl	8000c20 <__errno>
 80006e4:	4603      	mov	r3, r0
 80006e6:	220c      	movs	r2, #12
 80006e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
 80006ee:	e009      	b.n	8000704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006f0:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <_sbrk+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006f6:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <_sbrk+0x64>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	4a05      	ldr	r2, [pc, #20]	@ (8000714 <_sbrk+0x64>)
 8000700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000702:	68fb      	ldr	r3, [r7, #12]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20080000 	.word	0x20080000
 8000710:	00000400 	.word	0x00000400
 8000714:	2000009c 	.word	0x2000009c
 8000718:	200001f0 	.word	0x200001f0

0800071c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800071c:	480d      	ldr	r0, [pc, #52]	@ (8000754 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800071e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000720:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000724:	480c      	ldr	r0, [pc, #48]	@ (8000758 <LoopForever+0x6>)
  ldr r1, =_edata
 8000726:	490d      	ldr	r1, [pc, #52]	@ (800075c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000728:	4a0d      	ldr	r2, [pc, #52]	@ (8000760 <LoopForever+0xe>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800072c:	e002      	b.n	8000734 <LoopCopyDataInit>

0800072e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000732:	3304      	adds	r3, #4

08000734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000738:	d3f9      	bcc.n	800072e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073a:	4a0a      	ldr	r2, [pc, #40]	@ (8000764 <LoopForever+0x12>)
  ldr r4, =_ebss
 800073c:	4c0a      	ldr	r4, [pc, #40]	@ (8000768 <LoopForever+0x16>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000740:	e001      	b.n	8000746 <LoopFillZerobss>

08000742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000744:	3204      	adds	r2, #4

08000746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000748:	d3fb      	bcc.n	8000742 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800074a:	f000 fa6f 	bl	8000c2c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800074e:	f7ff fdc7 	bl	80002e0 <main>

08000752 <LoopForever>:

LoopForever:
  b LoopForever
 8000752:	e7fe      	b.n	8000752 <LoopForever>
  ldr   r0, =_estack
 8000754:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800075c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000760:	08001758 	.word	0x08001758
  ldr r2, =_sbss
 8000764:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000768:	200001ec 	.word	0x200001ec

0800076c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800076c:	e7fe      	b.n	800076c <ADC_IRQHandler>
	...

08000770 <std>:
 8000770:	2300      	movs	r3, #0
 8000772:	b510      	push	{r4, lr}
 8000774:	4604      	mov	r4, r0
 8000776:	e9c0 3300 	strd	r3, r3, [r0]
 800077a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800077e:	6083      	str	r3, [r0, #8]
 8000780:	8181      	strh	r1, [r0, #12]
 8000782:	6643      	str	r3, [r0, #100]	@ 0x64
 8000784:	81c2      	strh	r2, [r0, #14]
 8000786:	6183      	str	r3, [r0, #24]
 8000788:	4619      	mov	r1, r3
 800078a:	2208      	movs	r2, #8
 800078c:	305c      	adds	r0, #92	@ 0x5c
 800078e:	f000 f9f9 	bl	8000b84 <memset>
 8000792:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <std+0x58>)
 8000794:	6263      	str	r3, [r4, #36]	@ 0x24
 8000796:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <std+0x5c>)
 8000798:	62a3      	str	r3, [r4, #40]	@ 0x28
 800079a:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <std+0x60>)
 800079c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800079e:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <std+0x64>)
 80007a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80007a2:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <std+0x68>)
 80007a4:	6224      	str	r4, [r4, #32]
 80007a6:	429c      	cmp	r4, r3
 80007a8:	d006      	beq.n	80007b8 <std+0x48>
 80007aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80007ae:	4294      	cmp	r4, r2
 80007b0:	d002      	beq.n	80007b8 <std+0x48>
 80007b2:	33d0      	adds	r3, #208	@ 0xd0
 80007b4:	429c      	cmp	r4, r3
 80007b6:	d105      	bne.n	80007c4 <std+0x54>
 80007b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80007bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007c0:	f000 ba58 	b.w	8000c74 <__retarget_lock_init_recursive>
 80007c4:	bd10      	pop	{r4, pc}
 80007c6:	bf00      	nop
 80007c8:	080009d5 	.word	0x080009d5
 80007cc:	080009f7 	.word	0x080009f7
 80007d0:	08000a2f 	.word	0x08000a2f
 80007d4:	08000a53 	.word	0x08000a53
 80007d8:	200000a0 	.word	0x200000a0

080007dc <stdio_exit_handler>:
 80007dc:	4a02      	ldr	r2, [pc, #8]	@ (80007e8 <stdio_exit_handler+0xc>)
 80007de:	4903      	ldr	r1, [pc, #12]	@ (80007ec <stdio_exit_handler+0x10>)
 80007e0:	4803      	ldr	r0, [pc, #12]	@ (80007f0 <stdio_exit_handler+0x14>)
 80007e2:	f000 b869 	b.w	80008b8 <_fwalk_sglue>
 80007e6:	bf00      	nop
 80007e8:	20000010 	.word	0x20000010
 80007ec:	08001511 	.word	0x08001511
 80007f0:	20000020 	.word	0x20000020

080007f4 <cleanup_stdio>:
 80007f4:	6841      	ldr	r1, [r0, #4]
 80007f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <cleanup_stdio+0x34>)
 80007f8:	4299      	cmp	r1, r3
 80007fa:	b510      	push	{r4, lr}
 80007fc:	4604      	mov	r4, r0
 80007fe:	d001      	beq.n	8000804 <cleanup_stdio+0x10>
 8000800:	f000 fe86 	bl	8001510 <_fflush_r>
 8000804:	68a1      	ldr	r1, [r4, #8]
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <cleanup_stdio+0x38>)
 8000808:	4299      	cmp	r1, r3
 800080a:	d002      	beq.n	8000812 <cleanup_stdio+0x1e>
 800080c:	4620      	mov	r0, r4
 800080e:	f000 fe7f 	bl	8001510 <_fflush_r>
 8000812:	68e1      	ldr	r1, [r4, #12]
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <cleanup_stdio+0x3c>)
 8000816:	4299      	cmp	r1, r3
 8000818:	d004      	beq.n	8000824 <cleanup_stdio+0x30>
 800081a:	4620      	mov	r0, r4
 800081c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000820:	f000 be76 	b.w	8001510 <_fflush_r>
 8000824:	bd10      	pop	{r4, pc}
 8000826:	bf00      	nop
 8000828:	200000a0 	.word	0x200000a0
 800082c:	20000108 	.word	0x20000108
 8000830:	20000170 	.word	0x20000170

08000834 <global_stdio_init.part.0>:
 8000834:	b510      	push	{r4, lr}
 8000836:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <global_stdio_init.part.0+0x30>)
 8000838:	4c0b      	ldr	r4, [pc, #44]	@ (8000868 <global_stdio_init.part.0+0x34>)
 800083a:	4a0c      	ldr	r2, [pc, #48]	@ (800086c <global_stdio_init.part.0+0x38>)
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	4620      	mov	r0, r4
 8000840:	2200      	movs	r2, #0
 8000842:	2104      	movs	r1, #4
 8000844:	f7ff ff94 	bl	8000770 <std>
 8000848:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800084c:	2201      	movs	r2, #1
 800084e:	2109      	movs	r1, #9
 8000850:	f7ff ff8e 	bl	8000770 <std>
 8000854:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000858:	2202      	movs	r2, #2
 800085a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800085e:	2112      	movs	r1, #18
 8000860:	f7ff bf86 	b.w	8000770 <std>
 8000864:	200001d8 	.word	0x200001d8
 8000868:	200000a0 	.word	0x200000a0
 800086c:	080007dd 	.word	0x080007dd

08000870 <__sfp_lock_acquire>:
 8000870:	4801      	ldr	r0, [pc, #4]	@ (8000878 <__sfp_lock_acquire+0x8>)
 8000872:	f000 ba00 	b.w	8000c76 <__retarget_lock_acquire_recursive>
 8000876:	bf00      	nop
 8000878:	200001e1 	.word	0x200001e1

0800087c <__sfp_lock_release>:
 800087c:	4801      	ldr	r0, [pc, #4]	@ (8000884 <__sfp_lock_release+0x8>)
 800087e:	f000 b9fb 	b.w	8000c78 <__retarget_lock_release_recursive>
 8000882:	bf00      	nop
 8000884:	200001e1 	.word	0x200001e1

08000888 <__sinit>:
 8000888:	b510      	push	{r4, lr}
 800088a:	4604      	mov	r4, r0
 800088c:	f7ff fff0 	bl	8000870 <__sfp_lock_acquire>
 8000890:	6a23      	ldr	r3, [r4, #32]
 8000892:	b11b      	cbz	r3, 800089c <__sinit+0x14>
 8000894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000898:	f7ff bff0 	b.w	800087c <__sfp_lock_release>
 800089c:	4b04      	ldr	r3, [pc, #16]	@ (80008b0 <__sinit+0x28>)
 800089e:	6223      	str	r3, [r4, #32]
 80008a0:	4b04      	ldr	r3, [pc, #16]	@ (80008b4 <__sinit+0x2c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1f5      	bne.n	8000894 <__sinit+0xc>
 80008a8:	f7ff ffc4 	bl	8000834 <global_stdio_init.part.0>
 80008ac:	e7f2      	b.n	8000894 <__sinit+0xc>
 80008ae:	bf00      	nop
 80008b0:	080007f5 	.word	0x080007f5
 80008b4:	200001d8 	.word	0x200001d8

080008b8 <_fwalk_sglue>:
 80008b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008bc:	4607      	mov	r7, r0
 80008be:	4688      	mov	r8, r1
 80008c0:	4614      	mov	r4, r2
 80008c2:	2600      	movs	r6, #0
 80008c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008c8:	f1b9 0901 	subs.w	r9, r9, #1
 80008cc:	d505      	bpl.n	80008da <_fwalk_sglue+0x22>
 80008ce:	6824      	ldr	r4, [r4, #0]
 80008d0:	2c00      	cmp	r4, #0
 80008d2:	d1f7      	bne.n	80008c4 <_fwalk_sglue+0xc>
 80008d4:	4630      	mov	r0, r6
 80008d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008da:	89ab      	ldrh	r3, [r5, #12]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d907      	bls.n	80008f0 <_fwalk_sglue+0x38>
 80008e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008e4:	3301      	adds	r3, #1
 80008e6:	d003      	beq.n	80008f0 <_fwalk_sglue+0x38>
 80008e8:	4629      	mov	r1, r5
 80008ea:	4638      	mov	r0, r7
 80008ec:	47c0      	blx	r8
 80008ee:	4306      	orrs	r6, r0
 80008f0:	3568      	adds	r5, #104	@ 0x68
 80008f2:	e7e9      	b.n	80008c8 <_fwalk_sglue+0x10>

080008f4 <iprintf>:
 80008f4:	b40f      	push	{r0, r1, r2, r3}
 80008f6:	b507      	push	{r0, r1, r2, lr}
 80008f8:	4906      	ldr	r1, [pc, #24]	@ (8000914 <iprintf+0x20>)
 80008fa:	ab04      	add	r3, sp, #16
 80008fc:	6808      	ldr	r0, [r1, #0]
 80008fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8000902:	6881      	ldr	r1, [r0, #8]
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	f000 fadb 	bl	8000ec0 <_vfiprintf_r>
 800090a:	b003      	add	sp, #12
 800090c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000910:	b004      	add	sp, #16
 8000912:	4770      	bx	lr
 8000914:	2000001c 	.word	0x2000001c

08000918 <_puts_r>:
 8000918:	6a03      	ldr	r3, [r0, #32]
 800091a:	b570      	push	{r4, r5, r6, lr}
 800091c:	6884      	ldr	r4, [r0, #8]
 800091e:	4605      	mov	r5, r0
 8000920:	460e      	mov	r6, r1
 8000922:	b90b      	cbnz	r3, 8000928 <_puts_r+0x10>
 8000924:	f7ff ffb0 	bl	8000888 <__sinit>
 8000928:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800092a:	07db      	lsls	r3, r3, #31
 800092c:	d405      	bmi.n	800093a <_puts_r+0x22>
 800092e:	89a3      	ldrh	r3, [r4, #12]
 8000930:	0598      	lsls	r0, r3, #22
 8000932:	d402      	bmi.n	800093a <_puts_r+0x22>
 8000934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000936:	f000 f99e 	bl	8000c76 <__retarget_lock_acquire_recursive>
 800093a:	89a3      	ldrh	r3, [r4, #12]
 800093c:	0719      	lsls	r1, r3, #28
 800093e:	d502      	bpl.n	8000946 <_puts_r+0x2e>
 8000940:	6923      	ldr	r3, [r4, #16]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d135      	bne.n	80009b2 <_puts_r+0x9a>
 8000946:	4621      	mov	r1, r4
 8000948:	4628      	mov	r0, r5
 800094a:	f000 f8c5 	bl	8000ad8 <__swsetup_r>
 800094e:	b380      	cbz	r0, 80009b2 <_puts_r+0x9a>
 8000950:	f04f 35ff 	mov.w	r5, #4294967295
 8000954:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000956:	07da      	lsls	r2, r3, #31
 8000958:	d405      	bmi.n	8000966 <_puts_r+0x4e>
 800095a:	89a3      	ldrh	r3, [r4, #12]
 800095c:	059b      	lsls	r3, r3, #22
 800095e:	d402      	bmi.n	8000966 <_puts_r+0x4e>
 8000960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000962:	f000 f989 	bl	8000c78 <__retarget_lock_release_recursive>
 8000966:	4628      	mov	r0, r5
 8000968:	bd70      	pop	{r4, r5, r6, pc}
 800096a:	2b00      	cmp	r3, #0
 800096c:	da04      	bge.n	8000978 <_puts_r+0x60>
 800096e:	69a2      	ldr	r2, [r4, #24]
 8000970:	429a      	cmp	r2, r3
 8000972:	dc17      	bgt.n	80009a4 <_puts_r+0x8c>
 8000974:	290a      	cmp	r1, #10
 8000976:	d015      	beq.n	80009a4 <_puts_r+0x8c>
 8000978:	6823      	ldr	r3, [r4, #0]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	6022      	str	r2, [r4, #0]
 800097e:	7019      	strb	r1, [r3, #0]
 8000980:	68a3      	ldr	r3, [r4, #8]
 8000982:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000986:	3b01      	subs	r3, #1
 8000988:	60a3      	str	r3, [r4, #8]
 800098a:	2900      	cmp	r1, #0
 800098c:	d1ed      	bne.n	800096a <_puts_r+0x52>
 800098e:	2b00      	cmp	r3, #0
 8000990:	da11      	bge.n	80009b6 <_puts_r+0x9e>
 8000992:	4622      	mov	r2, r4
 8000994:	210a      	movs	r1, #10
 8000996:	4628      	mov	r0, r5
 8000998:	f000 f85f 	bl	8000a5a <__swbuf_r>
 800099c:	3001      	adds	r0, #1
 800099e:	d0d7      	beq.n	8000950 <_puts_r+0x38>
 80009a0:	250a      	movs	r5, #10
 80009a2:	e7d7      	b.n	8000954 <_puts_r+0x3c>
 80009a4:	4622      	mov	r2, r4
 80009a6:	4628      	mov	r0, r5
 80009a8:	f000 f857 	bl	8000a5a <__swbuf_r>
 80009ac:	3001      	adds	r0, #1
 80009ae:	d1e7      	bne.n	8000980 <_puts_r+0x68>
 80009b0:	e7ce      	b.n	8000950 <_puts_r+0x38>
 80009b2:	3e01      	subs	r6, #1
 80009b4:	e7e4      	b.n	8000980 <_puts_r+0x68>
 80009b6:	6823      	ldr	r3, [r4, #0]
 80009b8:	1c5a      	adds	r2, r3, #1
 80009ba:	6022      	str	r2, [r4, #0]
 80009bc:	220a      	movs	r2, #10
 80009be:	701a      	strb	r2, [r3, #0]
 80009c0:	e7ee      	b.n	80009a0 <_puts_r+0x88>
	...

080009c4 <puts>:
 80009c4:	4b02      	ldr	r3, [pc, #8]	@ (80009d0 <puts+0xc>)
 80009c6:	4601      	mov	r1, r0
 80009c8:	6818      	ldr	r0, [r3, #0]
 80009ca:	f7ff bfa5 	b.w	8000918 <_puts_r>
 80009ce:	bf00      	nop
 80009d0:	2000001c 	.word	0x2000001c

080009d4 <__sread>:
 80009d4:	b510      	push	{r4, lr}
 80009d6:	460c      	mov	r4, r1
 80009d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009dc:	f000 f8fc 	bl	8000bd8 <_read_r>
 80009e0:	2800      	cmp	r0, #0
 80009e2:	bfab      	itete	ge
 80009e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80009e6:	89a3      	ldrhlt	r3, [r4, #12]
 80009e8:	181b      	addge	r3, r3, r0
 80009ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80009ee:	bfac      	ite	ge
 80009f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80009f2:	81a3      	strhlt	r3, [r4, #12]
 80009f4:	bd10      	pop	{r4, pc}

080009f6 <__swrite>:
 80009f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009fa:	461f      	mov	r7, r3
 80009fc:	898b      	ldrh	r3, [r1, #12]
 80009fe:	05db      	lsls	r3, r3, #23
 8000a00:	4605      	mov	r5, r0
 8000a02:	460c      	mov	r4, r1
 8000a04:	4616      	mov	r6, r2
 8000a06:	d505      	bpl.n	8000a14 <__swrite+0x1e>
 8000a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f000 f8d0 	bl	8000bb4 <_lseek_r>
 8000a14:	89a3      	ldrh	r3, [r4, #12]
 8000a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a1e:	81a3      	strh	r3, [r4, #12]
 8000a20:	4632      	mov	r2, r6
 8000a22:	463b      	mov	r3, r7
 8000a24:	4628      	mov	r0, r5
 8000a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a2a:	f000 b8e7 	b.w	8000bfc <_write_r>

08000a2e <__sseek>:
 8000a2e:	b510      	push	{r4, lr}
 8000a30:	460c      	mov	r4, r1
 8000a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a36:	f000 f8bd 	bl	8000bb4 <_lseek_r>
 8000a3a:	1c43      	adds	r3, r0, #1
 8000a3c:	89a3      	ldrh	r3, [r4, #12]
 8000a3e:	bf15      	itete	ne
 8000a40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000a42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000a46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000a4a:	81a3      	strheq	r3, [r4, #12]
 8000a4c:	bf18      	it	ne
 8000a4e:	81a3      	strhne	r3, [r4, #12]
 8000a50:	bd10      	pop	{r4, pc}

08000a52 <__sclose>:
 8000a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a56:	f000 b89d 	b.w	8000b94 <_close_r>

08000a5a <__swbuf_r>:
 8000a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a5c:	460e      	mov	r6, r1
 8000a5e:	4614      	mov	r4, r2
 8000a60:	4605      	mov	r5, r0
 8000a62:	b118      	cbz	r0, 8000a6c <__swbuf_r+0x12>
 8000a64:	6a03      	ldr	r3, [r0, #32]
 8000a66:	b90b      	cbnz	r3, 8000a6c <__swbuf_r+0x12>
 8000a68:	f7ff ff0e 	bl	8000888 <__sinit>
 8000a6c:	69a3      	ldr	r3, [r4, #24]
 8000a6e:	60a3      	str	r3, [r4, #8]
 8000a70:	89a3      	ldrh	r3, [r4, #12]
 8000a72:	071a      	lsls	r2, r3, #28
 8000a74:	d501      	bpl.n	8000a7a <__swbuf_r+0x20>
 8000a76:	6923      	ldr	r3, [r4, #16]
 8000a78:	b943      	cbnz	r3, 8000a8c <__swbuf_r+0x32>
 8000a7a:	4621      	mov	r1, r4
 8000a7c:	4628      	mov	r0, r5
 8000a7e:	f000 f82b 	bl	8000ad8 <__swsetup_r>
 8000a82:	b118      	cbz	r0, 8000a8c <__swbuf_r+0x32>
 8000a84:	f04f 37ff 	mov.w	r7, #4294967295
 8000a88:	4638      	mov	r0, r7
 8000a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a8c:	6823      	ldr	r3, [r4, #0]
 8000a8e:	6922      	ldr	r2, [r4, #16]
 8000a90:	1a98      	subs	r0, r3, r2
 8000a92:	6963      	ldr	r3, [r4, #20]
 8000a94:	b2f6      	uxtb	r6, r6
 8000a96:	4283      	cmp	r3, r0
 8000a98:	4637      	mov	r7, r6
 8000a9a:	dc05      	bgt.n	8000aa8 <__swbuf_r+0x4e>
 8000a9c:	4621      	mov	r1, r4
 8000a9e:	4628      	mov	r0, r5
 8000aa0:	f000 fd36 	bl	8001510 <_fflush_r>
 8000aa4:	2800      	cmp	r0, #0
 8000aa6:	d1ed      	bne.n	8000a84 <__swbuf_r+0x2a>
 8000aa8:	68a3      	ldr	r3, [r4, #8]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	60a3      	str	r3, [r4, #8]
 8000aae:	6823      	ldr	r3, [r4, #0]
 8000ab0:	1c5a      	adds	r2, r3, #1
 8000ab2:	6022      	str	r2, [r4, #0]
 8000ab4:	701e      	strb	r6, [r3, #0]
 8000ab6:	6962      	ldr	r2, [r4, #20]
 8000ab8:	1c43      	adds	r3, r0, #1
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d004      	beq.n	8000ac8 <__swbuf_r+0x6e>
 8000abe:	89a3      	ldrh	r3, [r4, #12]
 8000ac0:	07db      	lsls	r3, r3, #31
 8000ac2:	d5e1      	bpl.n	8000a88 <__swbuf_r+0x2e>
 8000ac4:	2e0a      	cmp	r6, #10
 8000ac6:	d1df      	bne.n	8000a88 <__swbuf_r+0x2e>
 8000ac8:	4621      	mov	r1, r4
 8000aca:	4628      	mov	r0, r5
 8000acc:	f000 fd20 	bl	8001510 <_fflush_r>
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d0d9      	beq.n	8000a88 <__swbuf_r+0x2e>
 8000ad4:	e7d6      	b.n	8000a84 <__swbuf_r+0x2a>
	...

08000ad8 <__swsetup_r>:
 8000ad8:	b538      	push	{r3, r4, r5, lr}
 8000ada:	4b29      	ldr	r3, [pc, #164]	@ (8000b80 <__swsetup_r+0xa8>)
 8000adc:	4605      	mov	r5, r0
 8000ade:	6818      	ldr	r0, [r3, #0]
 8000ae0:	460c      	mov	r4, r1
 8000ae2:	b118      	cbz	r0, 8000aec <__swsetup_r+0x14>
 8000ae4:	6a03      	ldr	r3, [r0, #32]
 8000ae6:	b90b      	cbnz	r3, 8000aec <__swsetup_r+0x14>
 8000ae8:	f7ff fece 	bl	8000888 <__sinit>
 8000aec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000af0:	0719      	lsls	r1, r3, #28
 8000af2:	d422      	bmi.n	8000b3a <__swsetup_r+0x62>
 8000af4:	06da      	lsls	r2, r3, #27
 8000af6:	d407      	bmi.n	8000b08 <__swsetup_r+0x30>
 8000af8:	2209      	movs	r2, #9
 8000afa:	602a      	str	r2, [r5, #0]
 8000afc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b00:	81a3      	strh	r3, [r4, #12]
 8000b02:	f04f 30ff 	mov.w	r0, #4294967295
 8000b06:	e033      	b.n	8000b70 <__swsetup_r+0x98>
 8000b08:	0758      	lsls	r0, r3, #29
 8000b0a:	d512      	bpl.n	8000b32 <__swsetup_r+0x5a>
 8000b0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000b0e:	b141      	cbz	r1, 8000b22 <__swsetup_r+0x4a>
 8000b10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d002      	beq.n	8000b1e <__swsetup_r+0x46>
 8000b18:	4628      	mov	r0, r5
 8000b1a:	f000 f8af 	bl	8000c7c <_free_r>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	6363      	str	r3, [r4, #52]	@ 0x34
 8000b22:	89a3      	ldrh	r3, [r4, #12]
 8000b24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000b28:	81a3      	strh	r3, [r4, #12]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	6063      	str	r3, [r4, #4]
 8000b2e:	6923      	ldr	r3, [r4, #16]
 8000b30:	6023      	str	r3, [r4, #0]
 8000b32:	89a3      	ldrh	r3, [r4, #12]
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	81a3      	strh	r3, [r4, #12]
 8000b3a:	6923      	ldr	r3, [r4, #16]
 8000b3c:	b94b      	cbnz	r3, 8000b52 <__swsetup_r+0x7a>
 8000b3e:	89a3      	ldrh	r3, [r4, #12]
 8000b40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000b44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b48:	d003      	beq.n	8000b52 <__swsetup_r+0x7a>
 8000b4a:	4621      	mov	r1, r4
 8000b4c:	4628      	mov	r0, r5
 8000b4e:	f000 fd2d 	bl	80015ac <__smakebuf_r>
 8000b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b56:	f013 0201 	ands.w	r2, r3, #1
 8000b5a:	d00a      	beq.n	8000b72 <__swsetup_r+0x9a>
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60a2      	str	r2, [r4, #8]
 8000b60:	6962      	ldr	r2, [r4, #20]
 8000b62:	4252      	negs	r2, r2
 8000b64:	61a2      	str	r2, [r4, #24]
 8000b66:	6922      	ldr	r2, [r4, #16]
 8000b68:	b942      	cbnz	r2, 8000b7c <__swsetup_r+0xa4>
 8000b6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000b6e:	d1c5      	bne.n	8000afc <__swsetup_r+0x24>
 8000b70:	bd38      	pop	{r3, r4, r5, pc}
 8000b72:	0799      	lsls	r1, r3, #30
 8000b74:	bf58      	it	pl
 8000b76:	6962      	ldrpl	r2, [r4, #20]
 8000b78:	60a2      	str	r2, [r4, #8]
 8000b7a:	e7f4      	b.n	8000b66 <__swsetup_r+0x8e>
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	e7f7      	b.n	8000b70 <__swsetup_r+0x98>
 8000b80:	2000001c 	.word	0x2000001c

08000b84 <memset>:
 8000b84:	4402      	add	r2, r0
 8000b86:	4603      	mov	r3, r0
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d100      	bne.n	8000b8e <memset+0xa>
 8000b8c:	4770      	bx	lr
 8000b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8000b92:	e7f9      	b.n	8000b88 <memset+0x4>

08000b94 <_close_r>:
 8000b94:	b538      	push	{r3, r4, r5, lr}
 8000b96:	4d06      	ldr	r5, [pc, #24]	@ (8000bb0 <_close_r+0x1c>)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	602b      	str	r3, [r5, #0]
 8000ba0:	f7ff fd51 	bl	8000646 <_close>
 8000ba4:	1c43      	adds	r3, r0, #1
 8000ba6:	d102      	bne.n	8000bae <_close_r+0x1a>
 8000ba8:	682b      	ldr	r3, [r5, #0]
 8000baa:	b103      	cbz	r3, 8000bae <_close_r+0x1a>
 8000bac:	6023      	str	r3, [r4, #0]
 8000bae:	bd38      	pop	{r3, r4, r5, pc}
 8000bb0:	200001dc 	.word	0x200001dc

08000bb4 <_lseek_r>:
 8000bb4:	b538      	push	{r3, r4, r5, lr}
 8000bb6:	4d07      	ldr	r5, [pc, #28]	@ (8000bd4 <_lseek_r+0x20>)
 8000bb8:	4604      	mov	r4, r0
 8000bba:	4608      	mov	r0, r1
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	602a      	str	r2, [r5, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	f7ff fd66 	bl	8000694 <_lseek>
 8000bc8:	1c43      	adds	r3, r0, #1
 8000bca:	d102      	bne.n	8000bd2 <_lseek_r+0x1e>
 8000bcc:	682b      	ldr	r3, [r5, #0]
 8000bce:	b103      	cbz	r3, 8000bd2 <_lseek_r+0x1e>
 8000bd0:	6023      	str	r3, [r4, #0]
 8000bd2:	bd38      	pop	{r3, r4, r5, pc}
 8000bd4:	200001dc 	.word	0x200001dc

08000bd8 <_read_r>:
 8000bd8:	b538      	push	{r3, r4, r5, lr}
 8000bda:	4d07      	ldr	r5, [pc, #28]	@ (8000bf8 <_read_r+0x20>)
 8000bdc:	4604      	mov	r4, r0
 8000bde:	4608      	mov	r0, r1
 8000be0:	4611      	mov	r1, r2
 8000be2:	2200      	movs	r2, #0
 8000be4:	602a      	str	r2, [r5, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	f7ff fcf4 	bl	80005d4 <_read>
 8000bec:	1c43      	adds	r3, r0, #1
 8000bee:	d102      	bne.n	8000bf6 <_read_r+0x1e>
 8000bf0:	682b      	ldr	r3, [r5, #0]
 8000bf2:	b103      	cbz	r3, 8000bf6 <_read_r+0x1e>
 8000bf4:	6023      	str	r3, [r4, #0]
 8000bf6:	bd38      	pop	{r3, r4, r5, pc}
 8000bf8:	200001dc 	.word	0x200001dc

08000bfc <_write_r>:
 8000bfc:	b538      	push	{r3, r4, r5, lr}
 8000bfe:	4d07      	ldr	r5, [pc, #28]	@ (8000c1c <_write_r+0x20>)
 8000c00:	4604      	mov	r4, r0
 8000c02:	4608      	mov	r0, r1
 8000c04:	4611      	mov	r1, r2
 8000c06:	2200      	movs	r2, #0
 8000c08:	602a      	str	r2, [r5, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	f7ff fcff 	bl	800060e <_write>
 8000c10:	1c43      	adds	r3, r0, #1
 8000c12:	d102      	bne.n	8000c1a <_write_r+0x1e>
 8000c14:	682b      	ldr	r3, [r5, #0]
 8000c16:	b103      	cbz	r3, 8000c1a <_write_r+0x1e>
 8000c18:	6023      	str	r3, [r4, #0]
 8000c1a:	bd38      	pop	{r3, r4, r5, pc}
 8000c1c:	200001dc 	.word	0x200001dc

08000c20 <__errno>:
 8000c20:	4b01      	ldr	r3, [pc, #4]	@ (8000c28 <__errno+0x8>)
 8000c22:	6818      	ldr	r0, [r3, #0]
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	2000001c 	.word	0x2000001c

08000c2c <__libc_init_array>:
 8000c2c:	b570      	push	{r4, r5, r6, lr}
 8000c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8000c64 <__libc_init_array+0x38>)
 8000c30:	4c0d      	ldr	r4, [pc, #52]	@ (8000c68 <__libc_init_array+0x3c>)
 8000c32:	1b64      	subs	r4, r4, r5
 8000c34:	10a4      	asrs	r4, r4, #2
 8000c36:	2600      	movs	r6, #0
 8000c38:	42a6      	cmp	r6, r4
 8000c3a:	d109      	bne.n	8000c50 <__libc_init_array+0x24>
 8000c3c:	4d0b      	ldr	r5, [pc, #44]	@ (8000c6c <__libc_init_array+0x40>)
 8000c3e:	4c0c      	ldr	r4, [pc, #48]	@ (8000c70 <__libc_init_array+0x44>)
 8000c40:	f000 fd22 	bl	8001688 <_init>
 8000c44:	1b64      	subs	r4, r4, r5
 8000c46:	10a4      	asrs	r4, r4, #2
 8000c48:	2600      	movs	r6, #0
 8000c4a:	42a6      	cmp	r6, r4
 8000c4c:	d105      	bne.n	8000c5a <__libc_init_array+0x2e>
 8000c4e:	bd70      	pop	{r4, r5, r6, pc}
 8000c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c54:	4798      	blx	r3
 8000c56:	3601      	adds	r6, #1
 8000c58:	e7ee      	b.n	8000c38 <__libc_init_array+0xc>
 8000c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c5e:	4798      	blx	r3
 8000c60:	3601      	adds	r6, #1
 8000c62:	e7f2      	b.n	8000c4a <__libc_init_array+0x1e>
 8000c64:	08001750 	.word	0x08001750
 8000c68:	08001750 	.word	0x08001750
 8000c6c:	08001750 	.word	0x08001750
 8000c70:	08001754 	.word	0x08001754

08000c74 <__retarget_lock_init_recursive>:
 8000c74:	4770      	bx	lr

08000c76 <__retarget_lock_acquire_recursive>:
 8000c76:	4770      	bx	lr

08000c78 <__retarget_lock_release_recursive>:
 8000c78:	4770      	bx	lr
	...

08000c7c <_free_r>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	4605      	mov	r5, r0
 8000c80:	2900      	cmp	r1, #0
 8000c82:	d041      	beq.n	8000d08 <_free_r+0x8c>
 8000c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c88:	1f0c      	subs	r4, r1, #4
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	bfb8      	it	lt
 8000c8e:	18e4      	addlt	r4, r4, r3
 8000c90:	f000 f8e0 	bl	8000e54 <__malloc_lock>
 8000c94:	4a1d      	ldr	r2, [pc, #116]	@ (8000d0c <_free_r+0x90>)
 8000c96:	6813      	ldr	r3, [r2, #0]
 8000c98:	b933      	cbnz	r3, 8000ca8 <_free_r+0x2c>
 8000c9a:	6063      	str	r3, [r4, #4]
 8000c9c:	6014      	str	r4, [r2, #0]
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca4:	f000 b8dc 	b.w	8000e60 <__malloc_unlock>
 8000ca8:	42a3      	cmp	r3, r4
 8000caa:	d908      	bls.n	8000cbe <_free_r+0x42>
 8000cac:	6820      	ldr	r0, [r4, #0]
 8000cae:	1821      	adds	r1, r4, r0
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	bf01      	itttt	eq
 8000cb4:	6819      	ldreq	r1, [r3, #0]
 8000cb6:	685b      	ldreq	r3, [r3, #4]
 8000cb8:	1809      	addeq	r1, r1, r0
 8000cba:	6021      	streq	r1, [r4, #0]
 8000cbc:	e7ed      	b.n	8000c9a <_free_r+0x1e>
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	b10b      	cbz	r3, 8000cc8 <_free_r+0x4c>
 8000cc4:	42a3      	cmp	r3, r4
 8000cc6:	d9fa      	bls.n	8000cbe <_free_r+0x42>
 8000cc8:	6811      	ldr	r1, [r2, #0]
 8000cca:	1850      	adds	r0, r2, r1
 8000ccc:	42a0      	cmp	r0, r4
 8000cce:	d10b      	bne.n	8000ce8 <_free_r+0x6c>
 8000cd0:	6820      	ldr	r0, [r4, #0]
 8000cd2:	4401      	add	r1, r0
 8000cd4:	1850      	adds	r0, r2, r1
 8000cd6:	4283      	cmp	r3, r0
 8000cd8:	6011      	str	r1, [r2, #0]
 8000cda:	d1e0      	bne.n	8000c9e <_free_r+0x22>
 8000cdc:	6818      	ldr	r0, [r3, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	6053      	str	r3, [r2, #4]
 8000ce2:	4408      	add	r0, r1
 8000ce4:	6010      	str	r0, [r2, #0]
 8000ce6:	e7da      	b.n	8000c9e <_free_r+0x22>
 8000ce8:	d902      	bls.n	8000cf0 <_free_r+0x74>
 8000cea:	230c      	movs	r3, #12
 8000cec:	602b      	str	r3, [r5, #0]
 8000cee:	e7d6      	b.n	8000c9e <_free_r+0x22>
 8000cf0:	6820      	ldr	r0, [r4, #0]
 8000cf2:	1821      	adds	r1, r4, r0
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	bf04      	itt	eq
 8000cf8:	6819      	ldreq	r1, [r3, #0]
 8000cfa:	685b      	ldreq	r3, [r3, #4]
 8000cfc:	6063      	str	r3, [r4, #4]
 8000cfe:	bf04      	itt	eq
 8000d00:	1809      	addeq	r1, r1, r0
 8000d02:	6021      	streq	r1, [r4, #0]
 8000d04:	6054      	str	r4, [r2, #4]
 8000d06:	e7ca      	b.n	8000c9e <_free_r+0x22>
 8000d08:	bd38      	pop	{r3, r4, r5, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200001e8 	.word	0x200001e8

08000d10 <sbrk_aligned>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	4e0f      	ldr	r6, [pc, #60]	@ (8000d50 <sbrk_aligned+0x40>)
 8000d14:	460c      	mov	r4, r1
 8000d16:	6831      	ldr	r1, [r6, #0]
 8000d18:	4605      	mov	r5, r0
 8000d1a:	b911      	cbnz	r1, 8000d22 <sbrk_aligned+0x12>
 8000d1c:	f000 fca4 	bl	8001668 <_sbrk_r>
 8000d20:	6030      	str	r0, [r6, #0]
 8000d22:	4621      	mov	r1, r4
 8000d24:	4628      	mov	r0, r5
 8000d26:	f000 fc9f 	bl	8001668 <_sbrk_r>
 8000d2a:	1c43      	adds	r3, r0, #1
 8000d2c:	d103      	bne.n	8000d36 <sbrk_aligned+0x26>
 8000d2e:	f04f 34ff 	mov.w	r4, #4294967295
 8000d32:	4620      	mov	r0, r4
 8000d34:	bd70      	pop	{r4, r5, r6, pc}
 8000d36:	1cc4      	adds	r4, r0, #3
 8000d38:	f024 0403 	bic.w	r4, r4, #3
 8000d3c:	42a0      	cmp	r0, r4
 8000d3e:	d0f8      	beq.n	8000d32 <sbrk_aligned+0x22>
 8000d40:	1a21      	subs	r1, r4, r0
 8000d42:	4628      	mov	r0, r5
 8000d44:	f000 fc90 	bl	8001668 <_sbrk_r>
 8000d48:	3001      	adds	r0, #1
 8000d4a:	d1f2      	bne.n	8000d32 <sbrk_aligned+0x22>
 8000d4c:	e7ef      	b.n	8000d2e <sbrk_aligned+0x1e>
 8000d4e:	bf00      	nop
 8000d50:	200001e4 	.word	0x200001e4

08000d54 <_malloc_r>:
 8000d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d58:	1ccd      	adds	r5, r1, #3
 8000d5a:	f025 0503 	bic.w	r5, r5, #3
 8000d5e:	3508      	adds	r5, #8
 8000d60:	2d0c      	cmp	r5, #12
 8000d62:	bf38      	it	cc
 8000d64:	250c      	movcc	r5, #12
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	4606      	mov	r6, r0
 8000d6a:	db01      	blt.n	8000d70 <_malloc_r+0x1c>
 8000d6c:	42a9      	cmp	r1, r5
 8000d6e:	d904      	bls.n	8000d7a <_malloc_r+0x26>
 8000d70:	230c      	movs	r3, #12
 8000d72:	6033      	str	r3, [r6, #0]
 8000d74:	2000      	movs	r0, #0
 8000d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000e50 <_malloc_r+0xfc>
 8000d7e:	f000 f869 	bl	8000e54 <__malloc_lock>
 8000d82:	f8d8 3000 	ldr.w	r3, [r8]
 8000d86:	461c      	mov	r4, r3
 8000d88:	bb44      	cbnz	r4, 8000ddc <_malloc_r+0x88>
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	f7ff ffbf 	bl	8000d10 <sbrk_aligned>
 8000d92:	1c43      	adds	r3, r0, #1
 8000d94:	4604      	mov	r4, r0
 8000d96:	d158      	bne.n	8000e4a <_malloc_r+0xf6>
 8000d98:	f8d8 4000 	ldr.w	r4, [r8]
 8000d9c:	4627      	mov	r7, r4
 8000d9e:	2f00      	cmp	r7, #0
 8000da0:	d143      	bne.n	8000e2a <_malloc_r+0xd6>
 8000da2:	2c00      	cmp	r4, #0
 8000da4:	d04b      	beq.n	8000e3e <_malloc_r+0xea>
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	4639      	mov	r1, r7
 8000daa:	4630      	mov	r0, r6
 8000dac:	eb04 0903 	add.w	r9, r4, r3
 8000db0:	f000 fc5a 	bl	8001668 <_sbrk_r>
 8000db4:	4581      	cmp	r9, r0
 8000db6:	d142      	bne.n	8000e3e <_malloc_r+0xea>
 8000db8:	6821      	ldr	r1, [r4, #0]
 8000dba:	1a6d      	subs	r5, r5, r1
 8000dbc:	4629      	mov	r1, r5
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	f7ff ffa6 	bl	8000d10 <sbrk_aligned>
 8000dc4:	3001      	adds	r0, #1
 8000dc6:	d03a      	beq.n	8000e3e <_malloc_r+0xea>
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	442b      	add	r3, r5
 8000dcc:	6023      	str	r3, [r4, #0]
 8000dce:	f8d8 3000 	ldr.w	r3, [r8]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	bb62      	cbnz	r2, 8000e30 <_malloc_r+0xdc>
 8000dd6:	f8c8 7000 	str.w	r7, [r8]
 8000dda:	e00f      	b.n	8000dfc <_malloc_r+0xa8>
 8000ddc:	6822      	ldr	r2, [r4, #0]
 8000dde:	1b52      	subs	r2, r2, r5
 8000de0:	d420      	bmi.n	8000e24 <_malloc_r+0xd0>
 8000de2:	2a0b      	cmp	r2, #11
 8000de4:	d917      	bls.n	8000e16 <_malloc_r+0xc2>
 8000de6:	1961      	adds	r1, r4, r5
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	6025      	str	r5, [r4, #0]
 8000dec:	bf18      	it	ne
 8000dee:	6059      	strne	r1, [r3, #4]
 8000df0:	6863      	ldr	r3, [r4, #4]
 8000df2:	bf08      	it	eq
 8000df4:	f8c8 1000 	streq.w	r1, [r8]
 8000df8:	5162      	str	r2, [r4, r5]
 8000dfa:	604b      	str	r3, [r1, #4]
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	f000 f82f 	bl	8000e60 <__malloc_unlock>
 8000e02:	f104 000b 	add.w	r0, r4, #11
 8000e06:	1d23      	adds	r3, r4, #4
 8000e08:	f020 0007 	bic.w	r0, r0, #7
 8000e0c:	1ac2      	subs	r2, r0, r3
 8000e0e:	bf1c      	itt	ne
 8000e10:	1a1b      	subne	r3, r3, r0
 8000e12:	50a3      	strne	r3, [r4, r2]
 8000e14:	e7af      	b.n	8000d76 <_malloc_r+0x22>
 8000e16:	6862      	ldr	r2, [r4, #4]
 8000e18:	42a3      	cmp	r3, r4
 8000e1a:	bf0c      	ite	eq
 8000e1c:	f8c8 2000 	streq.w	r2, [r8]
 8000e20:	605a      	strne	r2, [r3, #4]
 8000e22:	e7eb      	b.n	8000dfc <_malloc_r+0xa8>
 8000e24:	4623      	mov	r3, r4
 8000e26:	6864      	ldr	r4, [r4, #4]
 8000e28:	e7ae      	b.n	8000d88 <_malloc_r+0x34>
 8000e2a:	463c      	mov	r4, r7
 8000e2c:	687f      	ldr	r7, [r7, #4]
 8000e2e:	e7b6      	b.n	8000d9e <_malloc_r+0x4a>
 8000e30:	461a      	mov	r2, r3
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	d1fb      	bne.n	8000e30 <_malloc_r+0xdc>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	6053      	str	r3, [r2, #4]
 8000e3c:	e7de      	b.n	8000dfc <_malloc_r+0xa8>
 8000e3e:	230c      	movs	r3, #12
 8000e40:	6033      	str	r3, [r6, #0]
 8000e42:	4630      	mov	r0, r6
 8000e44:	f000 f80c 	bl	8000e60 <__malloc_unlock>
 8000e48:	e794      	b.n	8000d74 <_malloc_r+0x20>
 8000e4a:	6005      	str	r5, [r0, #0]
 8000e4c:	e7d6      	b.n	8000dfc <_malloc_r+0xa8>
 8000e4e:	bf00      	nop
 8000e50:	200001e8 	.word	0x200001e8

08000e54 <__malloc_lock>:
 8000e54:	4801      	ldr	r0, [pc, #4]	@ (8000e5c <__malloc_lock+0x8>)
 8000e56:	f7ff bf0e 	b.w	8000c76 <__retarget_lock_acquire_recursive>
 8000e5a:	bf00      	nop
 8000e5c:	200001e0 	.word	0x200001e0

08000e60 <__malloc_unlock>:
 8000e60:	4801      	ldr	r0, [pc, #4]	@ (8000e68 <__malloc_unlock+0x8>)
 8000e62:	f7ff bf09 	b.w	8000c78 <__retarget_lock_release_recursive>
 8000e66:	bf00      	nop
 8000e68:	200001e0 	.word	0x200001e0

08000e6c <__sfputc_r>:
 8000e6c:	6893      	ldr	r3, [r2, #8]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	b410      	push	{r4}
 8000e74:	6093      	str	r3, [r2, #8]
 8000e76:	da08      	bge.n	8000e8a <__sfputc_r+0x1e>
 8000e78:	6994      	ldr	r4, [r2, #24]
 8000e7a:	42a3      	cmp	r3, r4
 8000e7c:	db01      	blt.n	8000e82 <__sfputc_r+0x16>
 8000e7e:	290a      	cmp	r1, #10
 8000e80:	d103      	bne.n	8000e8a <__sfputc_r+0x1e>
 8000e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e86:	f7ff bde8 	b.w	8000a5a <__swbuf_r>
 8000e8a:	6813      	ldr	r3, [r2, #0]
 8000e8c:	1c58      	adds	r0, r3, #1
 8000e8e:	6010      	str	r0, [r2, #0]
 8000e90:	7019      	strb	r1, [r3, #0]
 8000e92:	4608      	mov	r0, r1
 8000e94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <__sfputs_r>:
 8000e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9c:	4606      	mov	r6, r0
 8000e9e:	460f      	mov	r7, r1
 8000ea0:	4614      	mov	r4, r2
 8000ea2:	18d5      	adds	r5, r2, r3
 8000ea4:	42ac      	cmp	r4, r5
 8000ea6:	d101      	bne.n	8000eac <__sfputs_r+0x12>
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	e007      	b.n	8000ebc <__sfputs_r+0x22>
 8000eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eb0:	463a      	mov	r2, r7
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	f7ff ffda 	bl	8000e6c <__sfputc_r>
 8000eb8:	1c43      	adds	r3, r0, #1
 8000eba:	d1f3      	bne.n	8000ea4 <__sfputs_r+0xa>
 8000ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ec0 <_vfiprintf_r>:
 8000ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ec4:	460d      	mov	r5, r1
 8000ec6:	b09d      	sub	sp, #116	@ 0x74
 8000ec8:	4614      	mov	r4, r2
 8000eca:	4698      	mov	r8, r3
 8000ecc:	4606      	mov	r6, r0
 8000ece:	b118      	cbz	r0, 8000ed8 <_vfiprintf_r+0x18>
 8000ed0:	6a03      	ldr	r3, [r0, #32]
 8000ed2:	b90b      	cbnz	r3, 8000ed8 <_vfiprintf_r+0x18>
 8000ed4:	f7ff fcd8 	bl	8000888 <__sinit>
 8000ed8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000eda:	07d9      	lsls	r1, r3, #31
 8000edc:	d405      	bmi.n	8000eea <_vfiprintf_r+0x2a>
 8000ede:	89ab      	ldrh	r3, [r5, #12]
 8000ee0:	059a      	lsls	r2, r3, #22
 8000ee2:	d402      	bmi.n	8000eea <_vfiprintf_r+0x2a>
 8000ee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000ee6:	f7ff fec6 	bl	8000c76 <__retarget_lock_acquire_recursive>
 8000eea:	89ab      	ldrh	r3, [r5, #12]
 8000eec:	071b      	lsls	r3, r3, #28
 8000eee:	d501      	bpl.n	8000ef4 <_vfiprintf_r+0x34>
 8000ef0:	692b      	ldr	r3, [r5, #16]
 8000ef2:	b99b      	cbnz	r3, 8000f1c <_vfiprintf_r+0x5c>
 8000ef4:	4629      	mov	r1, r5
 8000ef6:	4630      	mov	r0, r6
 8000ef8:	f7ff fdee 	bl	8000ad8 <__swsetup_r>
 8000efc:	b170      	cbz	r0, 8000f1c <_vfiprintf_r+0x5c>
 8000efe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f00:	07dc      	lsls	r4, r3, #31
 8000f02:	d504      	bpl.n	8000f0e <_vfiprintf_r+0x4e>
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	b01d      	add	sp, #116	@ 0x74
 8000f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f0e:	89ab      	ldrh	r3, [r5, #12]
 8000f10:	0598      	lsls	r0, r3, #22
 8000f12:	d4f7      	bmi.n	8000f04 <_vfiprintf_r+0x44>
 8000f14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f16:	f7ff feaf 	bl	8000c78 <__retarget_lock_release_recursive>
 8000f1a:	e7f3      	b.n	8000f04 <_vfiprintf_r+0x44>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f20:	2320      	movs	r3, #32
 8000f22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8000f2a:	2330      	movs	r3, #48	@ 0x30
 8000f2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80010dc <_vfiprintf_r+0x21c>
 8000f30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000f34:	f04f 0901 	mov.w	r9, #1
 8000f38:	4623      	mov	r3, r4
 8000f3a:	469a      	mov	sl, r3
 8000f3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000f40:	b10a      	cbz	r2, 8000f46 <_vfiprintf_r+0x86>
 8000f42:	2a25      	cmp	r2, #37	@ 0x25
 8000f44:	d1f9      	bne.n	8000f3a <_vfiprintf_r+0x7a>
 8000f46:	ebba 0b04 	subs.w	fp, sl, r4
 8000f4a:	d00b      	beq.n	8000f64 <_vfiprintf_r+0xa4>
 8000f4c:	465b      	mov	r3, fp
 8000f4e:	4622      	mov	r2, r4
 8000f50:	4629      	mov	r1, r5
 8000f52:	4630      	mov	r0, r6
 8000f54:	f7ff ffa1 	bl	8000e9a <__sfputs_r>
 8000f58:	3001      	adds	r0, #1
 8000f5a:	f000 80a7 	beq.w	80010ac <_vfiprintf_r+0x1ec>
 8000f5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000f60:	445a      	add	r2, fp
 8000f62:	9209      	str	r2, [sp, #36]	@ 0x24
 8000f64:	f89a 3000 	ldrb.w	r3, [sl]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 809f 	beq.w	80010ac <_vfiprintf_r+0x1ec>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000f78:	f10a 0a01 	add.w	sl, sl, #1
 8000f7c:	9304      	str	r3, [sp, #16]
 8000f7e:	9307      	str	r3, [sp, #28]
 8000f80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000f84:	931a      	str	r3, [sp, #104]	@ 0x68
 8000f86:	4654      	mov	r4, sl
 8000f88:	2205      	movs	r2, #5
 8000f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f8e:	4853      	ldr	r0, [pc, #332]	@ (80010dc <_vfiprintf_r+0x21c>)
 8000f90:	f7ff f956 	bl	8000240 <memchr>
 8000f94:	9a04      	ldr	r2, [sp, #16]
 8000f96:	b9d8      	cbnz	r0, 8000fd0 <_vfiprintf_r+0x110>
 8000f98:	06d1      	lsls	r1, r2, #27
 8000f9a:	bf44      	itt	mi
 8000f9c:	2320      	movmi	r3, #32
 8000f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000fa2:	0713      	lsls	r3, r2, #28
 8000fa4:	bf44      	itt	mi
 8000fa6:	232b      	movmi	r3, #43	@ 0x2b
 8000fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000fac:	f89a 3000 	ldrb.w	r3, [sl]
 8000fb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000fb2:	d015      	beq.n	8000fe0 <_vfiprintf_r+0x120>
 8000fb4:	9a07      	ldr	r2, [sp, #28]
 8000fb6:	4654      	mov	r4, sl
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f04f 0c0a 	mov.w	ip, #10
 8000fbe:	4621      	mov	r1, r4
 8000fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000fc4:	3b30      	subs	r3, #48	@ 0x30
 8000fc6:	2b09      	cmp	r3, #9
 8000fc8:	d94b      	bls.n	8001062 <_vfiprintf_r+0x1a2>
 8000fca:	b1b0      	cbz	r0, 8000ffa <_vfiprintf_r+0x13a>
 8000fcc:	9207      	str	r2, [sp, #28]
 8000fce:	e014      	b.n	8000ffa <_vfiprintf_r+0x13a>
 8000fd0:	eba0 0308 	sub.w	r3, r0, r8
 8000fd4:	fa09 f303 	lsl.w	r3, r9, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	9304      	str	r3, [sp, #16]
 8000fdc:	46a2      	mov	sl, r4
 8000fde:	e7d2      	b.n	8000f86 <_vfiprintf_r+0xc6>
 8000fe0:	9b03      	ldr	r3, [sp, #12]
 8000fe2:	1d19      	adds	r1, r3, #4
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	9103      	str	r1, [sp, #12]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	bfbb      	ittet	lt
 8000fec:	425b      	neglt	r3, r3
 8000fee:	f042 0202 	orrlt.w	r2, r2, #2
 8000ff2:	9307      	strge	r3, [sp, #28]
 8000ff4:	9307      	strlt	r3, [sp, #28]
 8000ff6:	bfb8      	it	lt
 8000ff8:	9204      	strlt	r2, [sp, #16]
 8000ffa:	7823      	ldrb	r3, [r4, #0]
 8000ffc:	2b2e      	cmp	r3, #46	@ 0x2e
 8000ffe:	d10a      	bne.n	8001016 <_vfiprintf_r+0x156>
 8001000:	7863      	ldrb	r3, [r4, #1]
 8001002:	2b2a      	cmp	r3, #42	@ 0x2a
 8001004:	d132      	bne.n	800106c <_vfiprintf_r+0x1ac>
 8001006:	9b03      	ldr	r3, [sp, #12]
 8001008:	1d1a      	adds	r2, r3, #4
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	9203      	str	r2, [sp, #12]
 800100e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001012:	3402      	adds	r4, #2
 8001014:	9305      	str	r3, [sp, #20]
 8001016:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80010ec <_vfiprintf_r+0x22c>
 800101a:	7821      	ldrb	r1, [r4, #0]
 800101c:	2203      	movs	r2, #3
 800101e:	4650      	mov	r0, sl
 8001020:	f7ff f90e 	bl	8000240 <memchr>
 8001024:	b138      	cbz	r0, 8001036 <_vfiprintf_r+0x176>
 8001026:	9b04      	ldr	r3, [sp, #16]
 8001028:	eba0 000a 	sub.w	r0, r0, sl
 800102c:	2240      	movs	r2, #64	@ 0x40
 800102e:	4082      	lsls	r2, r0
 8001030:	4313      	orrs	r3, r2
 8001032:	3401      	adds	r4, #1
 8001034:	9304      	str	r3, [sp, #16]
 8001036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800103a:	4829      	ldr	r0, [pc, #164]	@ (80010e0 <_vfiprintf_r+0x220>)
 800103c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001040:	2206      	movs	r2, #6
 8001042:	f7ff f8fd 	bl	8000240 <memchr>
 8001046:	2800      	cmp	r0, #0
 8001048:	d03f      	beq.n	80010ca <_vfiprintf_r+0x20a>
 800104a:	4b26      	ldr	r3, [pc, #152]	@ (80010e4 <_vfiprintf_r+0x224>)
 800104c:	bb1b      	cbnz	r3, 8001096 <_vfiprintf_r+0x1d6>
 800104e:	9b03      	ldr	r3, [sp, #12]
 8001050:	3307      	adds	r3, #7
 8001052:	f023 0307 	bic.w	r3, r3, #7
 8001056:	3308      	adds	r3, #8
 8001058:	9303      	str	r3, [sp, #12]
 800105a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800105c:	443b      	add	r3, r7
 800105e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001060:	e76a      	b.n	8000f38 <_vfiprintf_r+0x78>
 8001062:	fb0c 3202 	mla	r2, ip, r2, r3
 8001066:	460c      	mov	r4, r1
 8001068:	2001      	movs	r0, #1
 800106a:	e7a8      	b.n	8000fbe <_vfiprintf_r+0xfe>
 800106c:	2300      	movs	r3, #0
 800106e:	3401      	adds	r4, #1
 8001070:	9305      	str	r3, [sp, #20]
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 0c0a 	mov.w	ip, #10
 8001078:	4620      	mov	r0, r4
 800107a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800107e:	3a30      	subs	r2, #48	@ 0x30
 8001080:	2a09      	cmp	r2, #9
 8001082:	d903      	bls.n	800108c <_vfiprintf_r+0x1cc>
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0c6      	beq.n	8001016 <_vfiprintf_r+0x156>
 8001088:	9105      	str	r1, [sp, #20]
 800108a:	e7c4      	b.n	8001016 <_vfiprintf_r+0x156>
 800108c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001090:	4604      	mov	r4, r0
 8001092:	2301      	movs	r3, #1
 8001094:	e7f0      	b.n	8001078 <_vfiprintf_r+0x1b8>
 8001096:	ab03      	add	r3, sp, #12
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	462a      	mov	r2, r5
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <_vfiprintf_r+0x228>)
 800109e:	a904      	add	r1, sp, #16
 80010a0:	4630      	mov	r0, r6
 80010a2:	f3af 8000 	nop.w
 80010a6:	4607      	mov	r7, r0
 80010a8:	1c78      	adds	r0, r7, #1
 80010aa:	d1d6      	bne.n	800105a <_vfiprintf_r+0x19a>
 80010ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80010ae:	07d9      	lsls	r1, r3, #31
 80010b0:	d405      	bmi.n	80010be <_vfiprintf_r+0x1fe>
 80010b2:	89ab      	ldrh	r3, [r5, #12]
 80010b4:	059a      	lsls	r2, r3, #22
 80010b6:	d402      	bmi.n	80010be <_vfiprintf_r+0x1fe>
 80010b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80010ba:	f7ff fddd 	bl	8000c78 <__retarget_lock_release_recursive>
 80010be:	89ab      	ldrh	r3, [r5, #12]
 80010c0:	065b      	lsls	r3, r3, #25
 80010c2:	f53f af1f 	bmi.w	8000f04 <_vfiprintf_r+0x44>
 80010c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80010c8:	e71e      	b.n	8000f08 <_vfiprintf_r+0x48>
 80010ca:	ab03      	add	r3, sp, #12
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	462a      	mov	r2, r5
 80010d0:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <_vfiprintf_r+0x228>)
 80010d2:	a904      	add	r1, sp, #16
 80010d4:	4630      	mov	r0, r6
 80010d6:	f000 f879 	bl	80011cc <_printf_i>
 80010da:	e7e4      	b.n	80010a6 <_vfiprintf_r+0x1e6>
 80010dc:	08001715 	.word	0x08001715
 80010e0:	0800171f 	.word	0x0800171f
 80010e4:	00000000 	.word	0x00000000
 80010e8:	08000e9b 	.word	0x08000e9b
 80010ec:	0800171b 	.word	0x0800171b

080010f0 <_printf_common>:
 80010f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010f4:	4616      	mov	r6, r2
 80010f6:	4698      	mov	r8, r3
 80010f8:	688a      	ldr	r2, [r1, #8]
 80010fa:	690b      	ldr	r3, [r1, #16]
 80010fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001100:	4293      	cmp	r3, r2
 8001102:	bfb8      	it	lt
 8001104:	4613      	movlt	r3, r2
 8001106:	6033      	str	r3, [r6, #0]
 8001108:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800110c:	4607      	mov	r7, r0
 800110e:	460c      	mov	r4, r1
 8001110:	b10a      	cbz	r2, 8001116 <_printf_common+0x26>
 8001112:	3301      	adds	r3, #1
 8001114:	6033      	str	r3, [r6, #0]
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	0699      	lsls	r1, r3, #26
 800111a:	bf42      	ittt	mi
 800111c:	6833      	ldrmi	r3, [r6, #0]
 800111e:	3302      	addmi	r3, #2
 8001120:	6033      	strmi	r3, [r6, #0]
 8001122:	6825      	ldr	r5, [r4, #0]
 8001124:	f015 0506 	ands.w	r5, r5, #6
 8001128:	d106      	bne.n	8001138 <_printf_common+0x48>
 800112a:	f104 0a19 	add.w	sl, r4, #25
 800112e:	68e3      	ldr	r3, [r4, #12]
 8001130:	6832      	ldr	r2, [r6, #0]
 8001132:	1a9b      	subs	r3, r3, r2
 8001134:	42ab      	cmp	r3, r5
 8001136:	dc26      	bgt.n	8001186 <_printf_common+0x96>
 8001138:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800113c:	6822      	ldr	r2, [r4, #0]
 800113e:	3b00      	subs	r3, #0
 8001140:	bf18      	it	ne
 8001142:	2301      	movne	r3, #1
 8001144:	0692      	lsls	r2, r2, #26
 8001146:	d42b      	bmi.n	80011a0 <_printf_common+0xb0>
 8001148:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800114c:	4641      	mov	r1, r8
 800114e:	4638      	mov	r0, r7
 8001150:	47c8      	blx	r9
 8001152:	3001      	adds	r0, #1
 8001154:	d01e      	beq.n	8001194 <_printf_common+0xa4>
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	6922      	ldr	r2, [r4, #16]
 800115a:	f003 0306 	and.w	r3, r3, #6
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf02      	ittt	eq
 8001162:	68e5      	ldreq	r5, [r4, #12]
 8001164:	6833      	ldreq	r3, [r6, #0]
 8001166:	1aed      	subeq	r5, r5, r3
 8001168:	68a3      	ldr	r3, [r4, #8]
 800116a:	bf0c      	ite	eq
 800116c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001170:	2500      	movne	r5, #0
 8001172:	4293      	cmp	r3, r2
 8001174:	bfc4      	itt	gt
 8001176:	1a9b      	subgt	r3, r3, r2
 8001178:	18ed      	addgt	r5, r5, r3
 800117a:	2600      	movs	r6, #0
 800117c:	341a      	adds	r4, #26
 800117e:	42b5      	cmp	r5, r6
 8001180:	d11a      	bne.n	80011b8 <_printf_common+0xc8>
 8001182:	2000      	movs	r0, #0
 8001184:	e008      	b.n	8001198 <_printf_common+0xa8>
 8001186:	2301      	movs	r3, #1
 8001188:	4652      	mov	r2, sl
 800118a:	4641      	mov	r1, r8
 800118c:	4638      	mov	r0, r7
 800118e:	47c8      	blx	r9
 8001190:	3001      	adds	r0, #1
 8001192:	d103      	bne.n	800119c <_printf_common+0xac>
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800119c:	3501      	adds	r5, #1
 800119e:	e7c6      	b.n	800112e <_printf_common+0x3e>
 80011a0:	18e1      	adds	r1, r4, r3
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	2030      	movs	r0, #48	@ 0x30
 80011a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80011aa:	4422      	add	r2, r4
 80011ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80011b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80011b4:	3302      	adds	r3, #2
 80011b6:	e7c7      	b.n	8001148 <_printf_common+0x58>
 80011b8:	2301      	movs	r3, #1
 80011ba:	4622      	mov	r2, r4
 80011bc:	4641      	mov	r1, r8
 80011be:	4638      	mov	r0, r7
 80011c0:	47c8      	blx	r9
 80011c2:	3001      	adds	r0, #1
 80011c4:	d0e6      	beq.n	8001194 <_printf_common+0xa4>
 80011c6:	3601      	adds	r6, #1
 80011c8:	e7d9      	b.n	800117e <_printf_common+0x8e>
	...

080011cc <_printf_i>:
 80011cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80011d0:	7e0f      	ldrb	r7, [r1, #24]
 80011d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80011d4:	2f78      	cmp	r7, #120	@ 0x78
 80011d6:	4691      	mov	r9, r2
 80011d8:	4680      	mov	r8, r0
 80011da:	460c      	mov	r4, r1
 80011dc:	469a      	mov	sl, r3
 80011de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80011e2:	d807      	bhi.n	80011f4 <_printf_i+0x28>
 80011e4:	2f62      	cmp	r7, #98	@ 0x62
 80011e6:	d80a      	bhi.n	80011fe <_printf_i+0x32>
 80011e8:	2f00      	cmp	r7, #0
 80011ea:	f000 80d1 	beq.w	8001390 <_printf_i+0x1c4>
 80011ee:	2f58      	cmp	r7, #88	@ 0x58
 80011f0:	f000 80b8 	beq.w	8001364 <_printf_i+0x198>
 80011f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80011f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80011fc:	e03a      	b.n	8001274 <_printf_i+0xa8>
 80011fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001202:	2b15      	cmp	r3, #21
 8001204:	d8f6      	bhi.n	80011f4 <_printf_i+0x28>
 8001206:	a101      	add	r1, pc, #4	@ (adr r1, 800120c <_printf_i+0x40>)
 8001208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800120c:	08001265 	.word	0x08001265
 8001210:	08001279 	.word	0x08001279
 8001214:	080011f5 	.word	0x080011f5
 8001218:	080011f5 	.word	0x080011f5
 800121c:	080011f5 	.word	0x080011f5
 8001220:	080011f5 	.word	0x080011f5
 8001224:	08001279 	.word	0x08001279
 8001228:	080011f5 	.word	0x080011f5
 800122c:	080011f5 	.word	0x080011f5
 8001230:	080011f5 	.word	0x080011f5
 8001234:	080011f5 	.word	0x080011f5
 8001238:	08001377 	.word	0x08001377
 800123c:	080012a3 	.word	0x080012a3
 8001240:	08001331 	.word	0x08001331
 8001244:	080011f5 	.word	0x080011f5
 8001248:	080011f5 	.word	0x080011f5
 800124c:	08001399 	.word	0x08001399
 8001250:	080011f5 	.word	0x080011f5
 8001254:	080012a3 	.word	0x080012a3
 8001258:	080011f5 	.word	0x080011f5
 800125c:	080011f5 	.word	0x080011f5
 8001260:	08001339 	.word	0x08001339
 8001264:	6833      	ldr	r3, [r6, #0]
 8001266:	1d1a      	adds	r2, r3, #4
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6032      	str	r2, [r6, #0]
 800126c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001270:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001274:	2301      	movs	r3, #1
 8001276:	e09c      	b.n	80013b2 <_printf_i+0x1e6>
 8001278:	6833      	ldr	r3, [r6, #0]
 800127a:	6820      	ldr	r0, [r4, #0]
 800127c:	1d19      	adds	r1, r3, #4
 800127e:	6031      	str	r1, [r6, #0]
 8001280:	0606      	lsls	r6, r0, #24
 8001282:	d501      	bpl.n	8001288 <_printf_i+0xbc>
 8001284:	681d      	ldr	r5, [r3, #0]
 8001286:	e003      	b.n	8001290 <_printf_i+0xc4>
 8001288:	0645      	lsls	r5, r0, #25
 800128a:	d5fb      	bpl.n	8001284 <_printf_i+0xb8>
 800128c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001290:	2d00      	cmp	r5, #0
 8001292:	da03      	bge.n	800129c <_printf_i+0xd0>
 8001294:	232d      	movs	r3, #45	@ 0x2d
 8001296:	426d      	negs	r5, r5
 8001298:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800129c:	4858      	ldr	r0, [pc, #352]	@ (8001400 <_printf_i+0x234>)
 800129e:	230a      	movs	r3, #10
 80012a0:	e011      	b.n	80012c6 <_printf_i+0xfa>
 80012a2:	6821      	ldr	r1, [r4, #0]
 80012a4:	6833      	ldr	r3, [r6, #0]
 80012a6:	0608      	lsls	r0, r1, #24
 80012a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80012ac:	d402      	bmi.n	80012b4 <_printf_i+0xe8>
 80012ae:	0649      	lsls	r1, r1, #25
 80012b0:	bf48      	it	mi
 80012b2:	b2ad      	uxthmi	r5, r5
 80012b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80012b6:	4852      	ldr	r0, [pc, #328]	@ (8001400 <_printf_i+0x234>)
 80012b8:	6033      	str	r3, [r6, #0]
 80012ba:	bf14      	ite	ne
 80012bc:	230a      	movne	r3, #10
 80012be:	2308      	moveq	r3, #8
 80012c0:	2100      	movs	r1, #0
 80012c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80012c6:	6866      	ldr	r6, [r4, #4]
 80012c8:	60a6      	str	r6, [r4, #8]
 80012ca:	2e00      	cmp	r6, #0
 80012cc:	db05      	blt.n	80012da <_printf_i+0x10e>
 80012ce:	6821      	ldr	r1, [r4, #0]
 80012d0:	432e      	orrs	r6, r5
 80012d2:	f021 0104 	bic.w	r1, r1, #4
 80012d6:	6021      	str	r1, [r4, #0]
 80012d8:	d04b      	beq.n	8001372 <_printf_i+0x1a6>
 80012da:	4616      	mov	r6, r2
 80012dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80012e0:	fb03 5711 	mls	r7, r3, r1, r5
 80012e4:	5dc7      	ldrb	r7, [r0, r7]
 80012e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80012ea:	462f      	mov	r7, r5
 80012ec:	42bb      	cmp	r3, r7
 80012ee:	460d      	mov	r5, r1
 80012f0:	d9f4      	bls.n	80012dc <_printf_i+0x110>
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d10b      	bne.n	800130e <_printf_i+0x142>
 80012f6:	6823      	ldr	r3, [r4, #0]
 80012f8:	07df      	lsls	r7, r3, #31
 80012fa:	d508      	bpl.n	800130e <_printf_i+0x142>
 80012fc:	6923      	ldr	r3, [r4, #16]
 80012fe:	6861      	ldr	r1, [r4, #4]
 8001300:	4299      	cmp	r1, r3
 8001302:	bfde      	ittt	le
 8001304:	2330      	movle	r3, #48	@ 0x30
 8001306:	f806 3c01 	strble.w	r3, [r6, #-1]
 800130a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800130e:	1b92      	subs	r2, r2, r6
 8001310:	6122      	str	r2, [r4, #16]
 8001312:	f8cd a000 	str.w	sl, [sp]
 8001316:	464b      	mov	r3, r9
 8001318:	aa03      	add	r2, sp, #12
 800131a:	4621      	mov	r1, r4
 800131c:	4640      	mov	r0, r8
 800131e:	f7ff fee7 	bl	80010f0 <_printf_common>
 8001322:	3001      	adds	r0, #1
 8001324:	d14a      	bne.n	80013bc <_printf_i+0x1f0>
 8001326:	f04f 30ff 	mov.w	r0, #4294967295
 800132a:	b004      	add	sp, #16
 800132c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	f043 0320 	orr.w	r3, r3, #32
 8001336:	6023      	str	r3, [r4, #0]
 8001338:	4832      	ldr	r0, [pc, #200]	@ (8001404 <_printf_i+0x238>)
 800133a:	2778      	movs	r7, #120	@ 0x78
 800133c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	6831      	ldr	r1, [r6, #0]
 8001344:	061f      	lsls	r7, r3, #24
 8001346:	f851 5b04 	ldr.w	r5, [r1], #4
 800134a:	d402      	bmi.n	8001352 <_printf_i+0x186>
 800134c:	065f      	lsls	r7, r3, #25
 800134e:	bf48      	it	mi
 8001350:	b2ad      	uxthmi	r5, r5
 8001352:	6031      	str	r1, [r6, #0]
 8001354:	07d9      	lsls	r1, r3, #31
 8001356:	bf44      	itt	mi
 8001358:	f043 0320 	orrmi.w	r3, r3, #32
 800135c:	6023      	strmi	r3, [r4, #0]
 800135e:	b11d      	cbz	r5, 8001368 <_printf_i+0x19c>
 8001360:	2310      	movs	r3, #16
 8001362:	e7ad      	b.n	80012c0 <_printf_i+0xf4>
 8001364:	4826      	ldr	r0, [pc, #152]	@ (8001400 <_printf_i+0x234>)
 8001366:	e7e9      	b.n	800133c <_printf_i+0x170>
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	f023 0320 	bic.w	r3, r3, #32
 800136e:	6023      	str	r3, [r4, #0]
 8001370:	e7f6      	b.n	8001360 <_printf_i+0x194>
 8001372:	4616      	mov	r6, r2
 8001374:	e7bd      	b.n	80012f2 <_printf_i+0x126>
 8001376:	6833      	ldr	r3, [r6, #0]
 8001378:	6825      	ldr	r5, [r4, #0]
 800137a:	6961      	ldr	r1, [r4, #20]
 800137c:	1d18      	adds	r0, r3, #4
 800137e:	6030      	str	r0, [r6, #0]
 8001380:	062e      	lsls	r6, r5, #24
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	d501      	bpl.n	800138a <_printf_i+0x1be>
 8001386:	6019      	str	r1, [r3, #0]
 8001388:	e002      	b.n	8001390 <_printf_i+0x1c4>
 800138a:	0668      	lsls	r0, r5, #25
 800138c:	d5fb      	bpl.n	8001386 <_printf_i+0x1ba>
 800138e:	8019      	strh	r1, [r3, #0]
 8001390:	2300      	movs	r3, #0
 8001392:	6123      	str	r3, [r4, #16]
 8001394:	4616      	mov	r6, r2
 8001396:	e7bc      	b.n	8001312 <_printf_i+0x146>
 8001398:	6833      	ldr	r3, [r6, #0]
 800139a:	1d1a      	adds	r2, r3, #4
 800139c:	6032      	str	r2, [r6, #0]
 800139e:	681e      	ldr	r6, [r3, #0]
 80013a0:	6862      	ldr	r2, [r4, #4]
 80013a2:	2100      	movs	r1, #0
 80013a4:	4630      	mov	r0, r6
 80013a6:	f7fe ff4b 	bl	8000240 <memchr>
 80013aa:	b108      	cbz	r0, 80013b0 <_printf_i+0x1e4>
 80013ac:	1b80      	subs	r0, r0, r6
 80013ae:	6060      	str	r0, [r4, #4]
 80013b0:	6863      	ldr	r3, [r4, #4]
 80013b2:	6123      	str	r3, [r4, #16]
 80013b4:	2300      	movs	r3, #0
 80013b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80013ba:	e7aa      	b.n	8001312 <_printf_i+0x146>
 80013bc:	6923      	ldr	r3, [r4, #16]
 80013be:	4632      	mov	r2, r6
 80013c0:	4649      	mov	r1, r9
 80013c2:	4640      	mov	r0, r8
 80013c4:	47d0      	blx	sl
 80013c6:	3001      	adds	r0, #1
 80013c8:	d0ad      	beq.n	8001326 <_printf_i+0x15a>
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	079b      	lsls	r3, r3, #30
 80013ce:	d413      	bmi.n	80013f8 <_printf_i+0x22c>
 80013d0:	68e0      	ldr	r0, [r4, #12]
 80013d2:	9b03      	ldr	r3, [sp, #12]
 80013d4:	4298      	cmp	r0, r3
 80013d6:	bfb8      	it	lt
 80013d8:	4618      	movlt	r0, r3
 80013da:	e7a6      	b.n	800132a <_printf_i+0x15e>
 80013dc:	2301      	movs	r3, #1
 80013de:	4632      	mov	r2, r6
 80013e0:	4649      	mov	r1, r9
 80013e2:	4640      	mov	r0, r8
 80013e4:	47d0      	blx	sl
 80013e6:	3001      	adds	r0, #1
 80013e8:	d09d      	beq.n	8001326 <_printf_i+0x15a>
 80013ea:	3501      	adds	r5, #1
 80013ec:	68e3      	ldr	r3, [r4, #12]
 80013ee:	9903      	ldr	r1, [sp, #12]
 80013f0:	1a5b      	subs	r3, r3, r1
 80013f2:	42ab      	cmp	r3, r5
 80013f4:	dcf2      	bgt.n	80013dc <_printf_i+0x210>
 80013f6:	e7eb      	b.n	80013d0 <_printf_i+0x204>
 80013f8:	2500      	movs	r5, #0
 80013fa:	f104 0619 	add.w	r6, r4, #25
 80013fe:	e7f5      	b.n	80013ec <_printf_i+0x220>
 8001400:	08001726 	.word	0x08001726
 8001404:	08001737 	.word	0x08001737

08001408 <__sflush_r>:
 8001408:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800140c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001410:	0716      	lsls	r6, r2, #28
 8001412:	4605      	mov	r5, r0
 8001414:	460c      	mov	r4, r1
 8001416:	d454      	bmi.n	80014c2 <__sflush_r+0xba>
 8001418:	684b      	ldr	r3, [r1, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	dc02      	bgt.n	8001424 <__sflush_r+0x1c>
 800141e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001420:	2b00      	cmp	r3, #0
 8001422:	dd48      	ble.n	80014b6 <__sflush_r+0xae>
 8001424:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001426:	2e00      	cmp	r6, #0
 8001428:	d045      	beq.n	80014b6 <__sflush_r+0xae>
 800142a:	2300      	movs	r3, #0
 800142c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001430:	682f      	ldr	r7, [r5, #0]
 8001432:	6a21      	ldr	r1, [r4, #32]
 8001434:	602b      	str	r3, [r5, #0]
 8001436:	d030      	beq.n	800149a <__sflush_r+0x92>
 8001438:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800143a:	89a3      	ldrh	r3, [r4, #12]
 800143c:	0759      	lsls	r1, r3, #29
 800143e:	d505      	bpl.n	800144c <__sflush_r+0x44>
 8001440:	6863      	ldr	r3, [r4, #4]
 8001442:	1ad2      	subs	r2, r2, r3
 8001444:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001446:	b10b      	cbz	r3, 800144c <__sflush_r+0x44>
 8001448:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800144a:	1ad2      	subs	r2, r2, r3
 800144c:	2300      	movs	r3, #0
 800144e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001450:	6a21      	ldr	r1, [r4, #32]
 8001452:	4628      	mov	r0, r5
 8001454:	47b0      	blx	r6
 8001456:	1c43      	adds	r3, r0, #1
 8001458:	89a3      	ldrh	r3, [r4, #12]
 800145a:	d106      	bne.n	800146a <__sflush_r+0x62>
 800145c:	6829      	ldr	r1, [r5, #0]
 800145e:	291d      	cmp	r1, #29
 8001460:	d82b      	bhi.n	80014ba <__sflush_r+0xb2>
 8001462:	4a2a      	ldr	r2, [pc, #168]	@ (800150c <__sflush_r+0x104>)
 8001464:	40ca      	lsrs	r2, r1
 8001466:	07d6      	lsls	r6, r2, #31
 8001468:	d527      	bpl.n	80014ba <__sflush_r+0xb2>
 800146a:	2200      	movs	r2, #0
 800146c:	6062      	str	r2, [r4, #4]
 800146e:	04d9      	lsls	r1, r3, #19
 8001470:	6922      	ldr	r2, [r4, #16]
 8001472:	6022      	str	r2, [r4, #0]
 8001474:	d504      	bpl.n	8001480 <__sflush_r+0x78>
 8001476:	1c42      	adds	r2, r0, #1
 8001478:	d101      	bne.n	800147e <__sflush_r+0x76>
 800147a:	682b      	ldr	r3, [r5, #0]
 800147c:	b903      	cbnz	r3, 8001480 <__sflush_r+0x78>
 800147e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001480:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001482:	602f      	str	r7, [r5, #0]
 8001484:	b1b9      	cbz	r1, 80014b6 <__sflush_r+0xae>
 8001486:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800148a:	4299      	cmp	r1, r3
 800148c:	d002      	beq.n	8001494 <__sflush_r+0x8c>
 800148e:	4628      	mov	r0, r5
 8001490:	f7ff fbf4 	bl	8000c7c <_free_r>
 8001494:	2300      	movs	r3, #0
 8001496:	6363      	str	r3, [r4, #52]	@ 0x34
 8001498:	e00d      	b.n	80014b6 <__sflush_r+0xae>
 800149a:	2301      	movs	r3, #1
 800149c:	4628      	mov	r0, r5
 800149e:	47b0      	blx	r6
 80014a0:	4602      	mov	r2, r0
 80014a2:	1c50      	adds	r0, r2, #1
 80014a4:	d1c9      	bne.n	800143a <__sflush_r+0x32>
 80014a6:	682b      	ldr	r3, [r5, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0c6      	beq.n	800143a <__sflush_r+0x32>
 80014ac:	2b1d      	cmp	r3, #29
 80014ae:	d001      	beq.n	80014b4 <__sflush_r+0xac>
 80014b0:	2b16      	cmp	r3, #22
 80014b2:	d11e      	bne.n	80014f2 <__sflush_r+0xea>
 80014b4:	602f      	str	r7, [r5, #0]
 80014b6:	2000      	movs	r0, #0
 80014b8:	e022      	b.n	8001500 <__sflush_r+0xf8>
 80014ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014be:	b21b      	sxth	r3, r3
 80014c0:	e01b      	b.n	80014fa <__sflush_r+0xf2>
 80014c2:	690f      	ldr	r7, [r1, #16]
 80014c4:	2f00      	cmp	r7, #0
 80014c6:	d0f6      	beq.n	80014b6 <__sflush_r+0xae>
 80014c8:	0793      	lsls	r3, r2, #30
 80014ca:	680e      	ldr	r6, [r1, #0]
 80014cc:	bf08      	it	eq
 80014ce:	694b      	ldreq	r3, [r1, #20]
 80014d0:	600f      	str	r7, [r1, #0]
 80014d2:	bf18      	it	ne
 80014d4:	2300      	movne	r3, #0
 80014d6:	eba6 0807 	sub.w	r8, r6, r7
 80014da:	608b      	str	r3, [r1, #8]
 80014dc:	f1b8 0f00 	cmp.w	r8, #0
 80014e0:	dde9      	ble.n	80014b6 <__sflush_r+0xae>
 80014e2:	6a21      	ldr	r1, [r4, #32]
 80014e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80014e6:	4643      	mov	r3, r8
 80014e8:	463a      	mov	r2, r7
 80014ea:	4628      	mov	r0, r5
 80014ec:	47b0      	blx	r6
 80014ee:	2800      	cmp	r0, #0
 80014f0:	dc08      	bgt.n	8001504 <__sflush_r+0xfc>
 80014f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014fa:	81a3      	strh	r3, [r4, #12]
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001504:	4407      	add	r7, r0
 8001506:	eba8 0800 	sub.w	r8, r8, r0
 800150a:	e7e7      	b.n	80014dc <__sflush_r+0xd4>
 800150c:	20400001 	.word	0x20400001

08001510 <_fflush_r>:
 8001510:	b538      	push	{r3, r4, r5, lr}
 8001512:	690b      	ldr	r3, [r1, #16]
 8001514:	4605      	mov	r5, r0
 8001516:	460c      	mov	r4, r1
 8001518:	b913      	cbnz	r3, 8001520 <_fflush_r+0x10>
 800151a:	2500      	movs	r5, #0
 800151c:	4628      	mov	r0, r5
 800151e:	bd38      	pop	{r3, r4, r5, pc}
 8001520:	b118      	cbz	r0, 800152a <_fflush_r+0x1a>
 8001522:	6a03      	ldr	r3, [r0, #32]
 8001524:	b90b      	cbnz	r3, 800152a <_fflush_r+0x1a>
 8001526:	f7ff f9af 	bl	8000888 <__sinit>
 800152a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f3      	beq.n	800151a <_fflush_r+0xa>
 8001532:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001534:	07d0      	lsls	r0, r2, #31
 8001536:	d404      	bmi.n	8001542 <_fflush_r+0x32>
 8001538:	0599      	lsls	r1, r3, #22
 800153a:	d402      	bmi.n	8001542 <_fflush_r+0x32>
 800153c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800153e:	f7ff fb9a 	bl	8000c76 <__retarget_lock_acquire_recursive>
 8001542:	4628      	mov	r0, r5
 8001544:	4621      	mov	r1, r4
 8001546:	f7ff ff5f 	bl	8001408 <__sflush_r>
 800154a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800154c:	07da      	lsls	r2, r3, #31
 800154e:	4605      	mov	r5, r0
 8001550:	d4e4      	bmi.n	800151c <_fflush_r+0xc>
 8001552:	89a3      	ldrh	r3, [r4, #12]
 8001554:	059b      	lsls	r3, r3, #22
 8001556:	d4e1      	bmi.n	800151c <_fflush_r+0xc>
 8001558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800155a:	f7ff fb8d 	bl	8000c78 <__retarget_lock_release_recursive>
 800155e:	e7dd      	b.n	800151c <_fflush_r+0xc>

08001560 <__swhatbuf_r>:
 8001560:	b570      	push	{r4, r5, r6, lr}
 8001562:	460c      	mov	r4, r1
 8001564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001568:	2900      	cmp	r1, #0
 800156a:	b096      	sub	sp, #88	@ 0x58
 800156c:	4615      	mov	r5, r2
 800156e:	461e      	mov	r6, r3
 8001570:	da0d      	bge.n	800158e <__swhatbuf_r+0x2e>
 8001572:	89a3      	ldrh	r3, [r4, #12]
 8001574:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001578:	f04f 0100 	mov.w	r1, #0
 800157c:	bf14      	ite	ne
 800157e:	2340      	movne	r3, #64	@ 0x40
 8001580:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001584:	2000      	movs	r0, #0
 8001586:	6031      	str	r1, [r6, #0]
 8001588:	602b      	str	r3, [r5, #0]
 800158a:	b016      	add	sp, #88	@ 0x58
 800158c:	bd70      	pop	{r4, r5, r6, pc}
 800158e:	466a      	mov	r2, sp
 8001590:	f000 f848 	bl	8001624 <_fstat_r>
 8001594:	2800      	cmp	r0, #0
 8001596:	dbec      	blt.n	8001572 <__swhatbuf_r+0x12>
 8001598:	9901      	ldr	r1, [sp, #4]
 800159a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800159e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80015a2:	4259      	negs	r1, r3
 80015a4:	4159      	adcs	r1, r3
 80015a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015aa:	e7eb      	b.n	8001584 <__swhatbuf_r+0x24>

080015ac <__smakebuf_r>:
 80015ac:	898b      	ldrh	r3, [r1, #12]
 80015ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015b0:	079d      	lsls	r5, r3, #30
 80015b2:	4606      	mov	r6, r0
 80015b4:	460c      	mov	r4, r1
 80015b6:	d507      	bpl.n	80015c8 <__smakebuf_r+0x1c>
 80015b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80015bc:	6023      	str	r3, [r4, #0]
 80015be:	6123      	str	r3, [r4, #16]
 80015c0:	2301      	movs	r3, #1
 80015c2:	6163      	str	r3, [r4, #20]
 80015c4:	b003      	add	sp, #12
 80015c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c8:	ab01      	add	r3, sp, #4
 80015ca:	466a      	mov	r2, sp
 80015cc:	f7ff ffc8 	bl	8001560 <__swhatbuf_r>
 80015d0:	9f00      	ldr	r7, [sp, #0]
 80015d2:	4605      	mov	r5, r0
 80015d4:	4639      	mov	r1, r7
 80015d6:	4630      	mov	r0, r6
 80015d8:	f7ff fbbc 	bl	8000d54 <_malloc_r>
 80015dc:	b948      	cbnz	r0, 80015f2 <__smakebuf_r+0x46>
 80015de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015e2:	059a      	lsls	r2, r3, #22
 80015e4:	d4ee      	bmi.n	80015c4 <__smakebuf_r+0x18>
 80015e6:	f023 0303 	bic.w	r3, r3, #3
 80015ea:	f043 0302 	orr.w	r3, r3, #2
 80015ee:	81a3      	strh	r3, [r4, #12]
 80015f0:	e7e2      	b.n	80015b8 <__smakebuf_r+0xc>
 80015f2:	89a3      	ldrh	r3, [r4, #12]
 80015f4:	6020      	str	r0, [r4, #0]
 80015f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015fa:	81a3      	strh	r3, [r4, #12]
 80015fc:	9b01      	ldr	r3, [sp, #4]
 80015fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001602:	b15b      	cbz	r3, 800161c <__smakebuf_r+0x70>
 8001604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001608:	4630      	mov	r0, r6
 800160a:	f000 f81d 	bl	8001648 <_isatty_r>
 800160e:	b128      	cbz	r0, 800161c <__smakebuf_r+0x70>
 8001610:	89a3      	ldrh	r3, [r4, #12]
 8001612:	f023 0303 	bic.w	r3, r3, #3
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	81a3      	strh	r3, [r4, #12]
 800161c:	89a3      	ldrh	r3, [r4, #12]
 800161e:	431d      	orrs	r5, r3
 8001620:	81a5      	strh	r5, [r4, #12]
 8001622:	e7cf      	b.n	80015c4 <__smakebuf_r+0x18>

08001624 <_fstat_r>:
 8001624:	b538      	push	{r3, r4, r5, lr}
 8001626:	4d07      	ldr	r5, [pc, #28]	@ (8001644 <_fstat_r+0x20>)
 8001628:	2300      	movs	r3, #0
 800162a:	4604      	mov	r4, r0
 800162c:	4608      	mov	r0, r1
 800162e:	4611      	mov	r1, r2
 8001630:	602b      	str	r3, [r5, #0]
 8001632:	f7ff f814 	bl	800065e <_fstat>
 8001636:	1c43      	adds	r3, r0, #1
 8001638:	d102      	bne.n	8001640 <_fstat_r+0x1c>
 800163a:	682b      	ldr	r3, [r5, #0]
 800163c:	b103      	cbz	r3, 8001640 <_fstat_r+0x1c>
 800163e:	6023      	str	r3, [r4, #0]
 8001640:	bd38      	pop	{r3, r4, r5, pc}
 8001642:	bf00      	nop
 8001644:	200001dc 	.word	0x200001dc

08001648 <_isatty_r>:
 8001648:	b538      	push	{r3, r4, r5, lr}
 800164a:	4d06      	ldr	r5, [pc, #24]	@ (8001664 <_isatty_r+0x1c>)
 800164c:	2300      	movs	r3, #0
 800164e:	4604      	mov	r4, r0
 8001650:	4608      	mov	r0, r1
 8001652:	602b      	str	r3, [r5, #0]
 8001654:	f7ff f813 	bl	800067e <_isatty>
 8001658:	1c43      	adds	r3, r0, #1
 800165a:	d102      	bne.n	8001662 <_isatty_r+0x1a>
 800165c:	682b      	ldr	r3, [r5, #0]
 800165e:	b103      	cbz	r3, 8001662 <_isatty_r+0x1a>
 8001660:	6023      	str	r3, [r4, #0]
 8001662:	bd38      	pop	{r3, r4, r5, pc}
 8001664:	200001dc 	.word	0x200001dc

08001668 <_sbrk_r>:
 8001668:	b538      	push	{r3, r4, r5, lr}
 800166a:	4d06      	ldr	r5, [pc, #24]	@ (8001684 <_sbrk_r+0x1c>)
 800166c:	2300      	movs	r3, #0
 800166e:	4604      	mov	r4, r0
 8001670:	4608      	mov	r0, r1
 8001672:	602b      	str	r3, [r5, #0]
 8001674:	f7ff f81c 	bl	80006b0 <_sbrk>
 8001678:	1c43      	adds	r3, r0, #1
 800167a:	d102      	bne.n	8001682 <_sbrk_r+0x1a>
 800167c:	682b      	ldr	r3, [r5, #0]
 800167e:	b103      	cbz	r3, 8001682 <_sbrk_r+0x1a>
 8001680:	6023      	str	r3, [r4, #0]
 8001682:	bd38      	pop	{r3, r4, r5, pc}
 8001684:	200001dc 	.word	0x200001dc

08001688 <_init>:
 8001688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800168a:	bf00      	nop
 800168c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800168e:	bc08      	pop	{r3}
 8001690:	469e      	mov	lr, r3
 8001692:	4770      	bx	lr

08001694 <_fini>:
 8001694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001696:	bf00      	nop
 8001698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800169a:	bc08      	pop	{r3}
 800169c:	469e      	mov	lr, r3
 800169e:	4770      	bx	lr
